# Generated from Solidity.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0088")
        buf.write("\u049f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\7\2\u00d3\n\2\f\2\16\2\u00d6\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\5\5\u00e3\n")
        buf.write("\5\3\6\3\6\5\6\u00e7\n\6\3\6\7\6\u00ea\n\6\f\6\16\6\u00ed")
        buf.write("\13\6\3\7\3\7\3\b\5\b\u00f2\n\b\3\b\3\b\5\b\u00f6\n\b")
        buf.write("\3\b\5\b\u00f9\n\b\3\t\3\t\3\t\5\t\u00fe\n\t\3\n\3\n\3")
        buf.write("\n\3\n\5\n\u0104\n\n\3\n\3\n\3\n\3\n\3\n\5\n\u010b\n\n")
        buf.write("\3\n\3\n\5\n\u010f\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\7\n\u011a\n\n\f\n\16\n\u011d\13\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u0124\n\n\3\13\3\13\3\f\5\f\u0129\n\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\7\f\u0131\n\f\f\f\16\f\u0134\13\f\5\f")
        buf.write("\u0136\n\f\3\f\3\f\7\f\u013a\n\f\f\f\16\f\u013d\13\f\3")
        buf.write("\f\3\f\3\r\3\r\3\r\5\r\u0144\n\r\3\r\5\r\u0147\n\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0151\n\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u015a\n\17\f\17")
        buf.write("\16\17\u015d\13\17\3\17\3\17\3\17\5\17\u0162\n\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u0177\n\22\3")
        buf.write("\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23")
        buf.write("\u0183\n\23\f\23\16\23\u0186\13\23\5\23\u0188\n\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\5\24\u018f\n\24\3\24\3\24\7\24\u0193")
        buf.write("\n\24\f\24\16\24\u0196\13\24\3\24\3\24\5\24\u019a\n\24")
        buf.write("\3\25\3\25\3\25\5\25\u019f\n\25\3\25\5\25\u01a2\n\25\3")
        buf.write("\26\3\26\3\26\3\26\5\26\u01a8\n\26\3\26\3\26\5\26\u01ac")
        buf.write("\n\26\3\27\3\27\5\27\u01b0\n\27\3\27\3\27\3\27\5\27\u01b5")
        buf.write("\n\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\7\31\u01bf")
        buf.write("\n\31\f\31\16\31\u01c2\13\31\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u01c8\n\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\34\5")
        buf.write("\34\u01d2\n\34\3\34\3\34\7\34\u01d6\n\34\f\34\16\34\u01d9")
        buf.write("\13\34\3\34\3\34\3\35\3\35\3\35\3\35\7\35\u01e1\n\35\f")
        buf.write("\35\16\35\u01e4\13\35\5\35\u01e6\n\35\3\35\3\35\3\36\3")
        buf.write("\36\5\36\u01ec\n\36\3\36\5\36\u01ef\n\36\3\37\3\37\3\37")
        buf.write("\3\37\7\37\u01f5\n\37\f\37\16\37\u01f8\13\37\5\37\u01fa")
        buf.write("\n\37\3\37\3\37\3 \3 \5 \u0200\n \3 \5 \u0203\n \3!\3")
        buf.write("!\3!\3!\7!\u0209\n!\f!\16!\u020c\13!\5!\u020e\n!\3!\3")
        buf.write("!\3\"\3\"\5\"\u0214\n\"\3#\3#\5#\u0218\n#\3#\3#\3$\3$")
        buf.write("\3$\3$\3$\3$\3$\5$\u0223\n$\3$\3$\3$\5$\u0228\n$\3$\7")
        buf.write("$\u022b\n$\f$\16$\u022e\13$\3%\3%\3%\7%\u0233\n%\f%\16")
        buf.write("%\u0236\13%\3&\3&\5&\u023a\n&\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3(\3(\3(\3(\3(\7(\u0248\n(\f(\16(\u024b\13(\3(\3")
        buf.write("(\5(\u024f\n(\3)\3)\3*\3*\3+\3+\7+\u0257\n+\f+\16+\u025a")
        buf.write("\13+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\5,\u026e\n,\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\5.\u027a")
        buf.write("\n.\3/\3/\3/\5/\u027f\n/\3/\3/\6/\u0283\n/\r/\16/\u0284")
        buf.write("\3\60\3\60\5\60\u0289\n\60\3\60\5\60\u028c\n\60\3\60\3")
        buf.write("\60\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\5\62\u0298")
        buf.write("\n\62\3\63\3\63\3\63\3\64\3\64\5\64\u029f\n\64\3\65\3")
        buf.write("\65\3\65\3\65\5\65\u02a5\n\65\3\65\3\65\5\65\u02a9\n\65")
        buf.write("\3\65\5\65\u02ac\n\65\3\65\3\65\3\65\3\66\3\66\5\66\u02b3")
        buf.write("\n\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\38\38\38\39\39\39\3:\3:\5:\u02c7\n:\3:\3:\3;\3;\3;\3")
        buf.write("<\3<\3<\3<\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\5>\u02dd\n")
        buf.write(">\3>\3>\5>\u02e1\n>\3>\3>\3?\5?\u02e6\n?\3?\3?\5?\u02ea")
        buf.write("\n?\7?\u02ec\n?\f?\16?\u02ef\13?\3@\3@\5@\u02f3\n@\3@")
        buf.write("\7@\u02f6\n@\f@\16@\u02f9\13@\3@\5@\u02fc\n@\3@\3@\3A")
        buf.write("\3A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u031e\nB\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u034f\nB\3B\3B\3B\3B\5B\u0355")
        buf.write("\nB\3B\3B\5B\u0359\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\5B\u0366\nB\3B\3B\3B\3B\7B\u036c\nB\fB\16B\u036f\13")
        buf.write("B\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u037a\nC\3C\3C\3C\5C\u037f")
        buf.write("\nC\3C\5C\u0382\nC\3D\3D\3D\7D\u0387\nD\fD\16D\u038a\13")
        buf.write("D\3E\3E\3E\7E\u038f\nE\fE\16E\u0392\13E\3E\5E\u0395\n")
        buf.write("E\3F\3F\3F\3F\3G\3G\5G\u039d\nG\3G\3G\3H\3H\5H\u03a3\n")
        buf.write("H\3H\3H\5H\u03a7\nH\5H\u03a9\nH\3I\3I\3I\3I\3I\3J\3J\7")
        buf.write("J\u03b2\nJ\fJ\16J\u03b5\13J\3J\3J\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u03cb\nK\3L\3L\3")
        buf.write("L\5L\u03d0\nL\3M\3M\3M\3M\3N\3N\3N\3N\5N\u03da\nN\3N\3")
        buf.write("N\5N\u03de\nN\3N\3N\7N\u03e2\nN\fN\16N\u03e5\13N\3N\5")
        buf.write("N\u03e8\nN\3O\3O\3O\3O\5O\u03ee\nO\3P\3P\3P\3P\3Q\3Q\3")
        buf.write("Q\3Q\3Q\3Q\5Q\u03fa\nQ\3R\3R\3R\7R\u03ff\nR\fR\16R\u0402")
        buf.write("\13R\3S\3S\3S\3T\3T\3T\3U\3U\3U\7U\u040d\nU\fU\16U\u0410")
        buf.write("\13U\3V\3V\3V\3V\3V\3V\5V\u0418\nV\3W\3W\3W\3W\5W\u041e")
        buf.write("\nW\3W\3W\5W\u0422\nW\3W\3W\3X\3X\3X\3Y\3Y\3Y\5Y\u042c")
        buf.write("\nY\3Y\3Y\3Y\5Y\u0431\nY\3Y\3Y\3Z\3Z\3Z\3Z\3[\3[\3[\3")
        buf.write("[\5[\u043d\n[\3\\\3\\\3\\\3\\\3]\3]\5]\u0445\n]\3]\3]")
        buf.write("\5]\u0449\n]\7]\u044b\n]\f]\16]\u044e\13]\5]\u0450\n]")
        buf.write("\3]\3]\3]\3]\3]\7]\u0457\n]\f]\16]\u045a\13]\5]\u045c")
        buf.write("\n]\3]\5]\u045f\n]\3^\3^\5^\u0463\n^\3_\3_\5_\u0467\n")
        buf.write("_\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0471\n`\3a\6a\u0474\na\r")
        buf.write("a\16a\u0475\3b\3b\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c")
        buf.write("\3c\3c\3c\3c\5c\u048a\nc\3d\3d\3d\3d\3d\7d\u0491\nd\f")
        buf.write("d\16d\u0494\13d\3d\3d\5d\u0498\nd\3e\6e\u049b\ne\re\16")
        buf.write("e\u049c\3e\2\4F\u0082f\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\2\21\3\2\6\f\3\2\25\27\3\2*,\6\2rr")
        buf.write("yy}}\177\177\5\2&&:=ei\3\2>?\3\2BC\3\2DE\4\2\17\17HI\3")
        buf.write("\2JK\3\2\b\13\3\2NO\4\2\f\fR[\3\2kl\5\2vvxxz{\2\u0532")
        buf.write("\2\u00d4\3\2\2\2\4\u00d9\3\2\2\2\6\u00de\3\2\2\2\b\u00e2")
        buf.write("\3\2\2\2\n\u00e4\3\2\2\2\f\u00ee\3\2\2\2\16\u00f8\3\2")
        buf.write("\2\2\20\u00fa\3\2\2\2\22\u0123\3\2\2\2\24\u0125\3\2\2")
        buf.write("\2\26\u0128\3\2\2\2\30\u0140\3\2\2\2\32\u0150\3\2\2\2")
        buf.write("\34\u0152\3\2\2\2\36\u0165\3\2\2\2 \u016c\3\2\2\2\"\u0171")
        buf.write("\3\2\2\2$\u017a\3\2\2\2&\u018b\3\2\2\2(\u019b\3\2\2\2")
        buf.write("*\u01a3\3\2\2\2,\u01b4\3\2\2\2.\u01b6\3\2\2\2\60\u01c0")
        buf.write("\3\2\2\2\62\u01c3\3\2\2\2\64\u01cb\3\2\2\2\66\u01cd\3")
        buf.write("\2\2\28\u01dc\3\2\2\2:\u01e9\3\2\2\2<\u01f0\3\2\2\2>\u01fd")
        buf.write("\3\2\2\2@\u0204\3\2\2\2B\u0211\3\2\2\2D\u0215\3\2\2\2")
        buf.write("F\u0222\3\2\2\2H\u022f\3\2\2\2J\u0239\3\2\2\2L\u023b\3")
        buf.write("\2\2\2N\u0242\3\2\2\2P\u0250\3\2\2\2R\u0252\3\2\2\2T\u0254")
        buf.write("\3\2\2\2V\u026d\3\2\2\2X\u026f\3\2\2\2Z\u0272\3\2\2\2")
        buf.write("\\\u027b\3\2\2\2^\u0286\3\2\2\2`\u028f\3\2\2\2b\u0297")
        buf.write("\3\2\2\2d\u0299\3\2\2\2f\u029c\3\2\2\2h\u02a0\3\2\2\2")
        buf.write("j\u02b0\3\2\2\2l\u02b6\3\2\2\2n\u02be\3\2\2\2p\u02c1\3")
        buf.write("\2\2\2r\u02c4\3\2\2\2t\u02ca\3\2\2\2v\u02cd\3\2\2\2x\u02d1")
        buf.write("\3\2\2\2z\u02dc\3\2\2\2|\u02e5\3\2\2\2~\u02f0\3\2\2\2")
        buf.write("\u0080\u02ff\3\2\2\2\u0082\u031d\3\2\2\2\u0084\u0381\3")
        buf.write("\2\2\2\u0086\u0383\3\2\2\2\u0088\u038b\3\2\2\2\u008a\u0396")
        buf.write("\3\2\2\2\u008c\u039a\3\2\2\2\u008e\u03a8\3\2\2\2\u0090")
        buf.write("\u03aa\3\2\2\2\u0092\u03af\3\2\2\2\u0094\u03ca\3\2\2\2")
        buf.write("\u0096\u03cf\3\2\2\2\u0098\u03d1\3\2\2\2\u009a\u03d9\3")
        buf.write("\2\2\2\u009c\u03e9\3\2\2\2\u009e\u03ef\3\2\2\2\u00a0\u03f9")
        buf.write("\3\2\2\2\u00a2\u03fb\3\2\2\2\u00a4\u0403\3\2\2\2\u00a6")
        buf.write("\u0406\3\2\2\2\u00a8\u0409\3\2\2\2\u00aa\u0417\3\2\2\2")
        buf.write("\u00ac\u0419\3\2\2\2\u00ae\u0425\3\2\2\2\u00b0\u0428\3")
        buf.write("\2\2\2\u00b2\u0434\3\2\2\2\u00b4\u043c\3\2\2\2\u00b6\u043e")
        buf.write("\3\2\2\2\u00b8\u045e\3\2\2\2\u00ba\u0462\3\2\2\2\u00bc")
        buf.write("\u0464\3\2\2\2\u00be\u0470\3\2\2\2\u00c0\u0473\3\2\2\2")
        buf.write("\u00c2\u0477\3\2\2\2\u00c4\u0489\3\2\2\2\u00c6\u048b\3")
        buf.write("\2\2\2\u00c8\u049a\3\2\2\2\u00ca\u00d3\5\4\3\2\u00cb\u00d3")
        buf.write("\5\22\n\2\u00cc\u00d3\5\26\f\2\u00cd\u00d3\5\66\34\2\u00ce")
        buf.write("\u00d3\5$\23\2\u00cf\u00d3\5*\26\2\u00d0\u00d3\5\36\20")
        buf.write("\2\u00d1\u00d3\5 \21\2\u00d2\u00ca\3\2\2\2\u00d2\u00cb")
        buf.write("\3\2\2\2\u00d2\u00cc\3\2\2\2\u00d2\u00cd\3\2\2\2\u00d2")
        buf.write("\u00ce\3\2\2\2\u00d2\u00cf\3\2\2\2\u00d2\u00d0\3\2\2\2")
        buf.write("\u00d2\u00d1\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3")
        buf.write("\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d7\3\2\2\2\u00d6\u00d4")
        buf.write("\3\2\2\2\u00d7\u00d8\7\2\2\3\u00d8\3\3\2\2\2\u00d9\u00da")
        buf.write("\7\3\2\2\u00da\u00db\5\6\4\2\u00db\u00dc\5\b\5\2\u00dc")
        buf.write("\u00dd\7\4\2\2\u00dd\5\3\2\2\2\u00de\u00df\5\u00be`\2")
        buf.write("\u00df\7\3\2\2\2\u00e0\u00e3\5\n\6\2\u00e1\u00e3\5\u0082")
        buf.write("B\2\u00e2\u00e0\3\2\2\2\u00e2\u00e1\3\2\2\2\u00e3\t\3")
        buf.write("\2\2\2\u00e4\u00eb\5\16\b\2\u00e5\u00e7\7\5\2\2\u00e6")
        buf.write("\u00e5\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e8\u00ea\5\16\b\2\u00e9\u00e6\3\2\2\2\u00ea\u00ed")
        buf.write("\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\13\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee\u00ef\t\2\2\2\u00ef")
        buf.write("\r\3\2\2\2\u00f0\u00f2\5\f\7\2\u00f1\u00f0\3\2\2\2\u00f1")
        buf.write("\u00f2\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f9\7\u0085")
        buf.write("\2\2\u00f4\u00f6\5\f\7\2\u00f5\u00f4\3\2\2\2\u00f5\u00f6")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f9\7k\2\2\u00f8")
        buf.write("\u00f1\3\2\2\2\u00f8\u00f5\3\2\2\2\u00f9\17\3\2\2\2\u00fa")
        buf.write("\u00fd\5\u00be`\2\u00fb\u00fc\7\r\2\2\u00fc\u00fe\5\u00be")
        buf.write("`\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\21\3")
        buf.write("\2\2\2\u00ff\u0100\7\16\2\2\u0100\u0103\5\24\13\2\u0101")
        buf.write("\u0102\7\r\2\2\u0102\u0104\5\u00be`\2\u0103\u0101\3\2")
        buf.write("\2\2\u0103\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0106")
        buf.write("\7\4\2\2\u0106\u0124\3\2\2\2\u0107\u010a\7\16\2\2\u0108")
        buf.write("\u010b\7\17\2\2\u0109\u010b\5\u00be`\2\u010a\u0108\3\2")
        buf.write("\2\2\u010a\u0109\3\2\2\2\u010b\u010e\3\2\2\2\u010c\u010d")
        buf.write("\7\r\2\2\u010d\u010f\5\u00be`\2\u010e\u010c\3\2\2\2\u010e")
        buf.write("\u010f\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0111\7\20\2")
        buf.write("\2\u0111\u0112\5\24\13\2\u0112\u0113\7\4\2\2\u0113\u0124")
        buf.write("\3\2\2\2\u0114\u0115\7\16\2\2\u0115\u0116\7\21\2\2\u0116")
        buf.write("\u011b\5\20\t\2\u0117\u0118\7\22\2\2\u0118\u011a\5\20")
        buf.write("\t\2\u0119\u0117\3\2\2\2\u011a\u011d\3\2\2\2\u011b\u0119")
        buf.write("\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\3\2\2\2\u011d")
        buf.write("\u011b\3\2\2\2\u011e\u011f\7\23\2\2\u011f\u0120\7\20\2")
        buf.write("\2\u0120\u0121\5\24\13\2\u0121\u0122\7\4\2\2\u0122\u0124")
        buf.write("\3\2\2\2\u0123\u00ff\3\2\2\2\u0123\u0107\3\2\2\2\u0123")
        buf.write("\u0114\3\2\2\2\u0124\23\3\2\2\2\u0125\u0126\7\u0084\2")
        buf.write("\2\u0126\25\3\2\2\2\u0127\u0129\7\24\2\2\u0128\u0127\3")
        buf.write("\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b")
        buf.write("\t\3\2\2\u012b\u0135\5\u00be`\2\u012c\u012d\7\30\2\2\u012d")
        buf.write("\u0132\5\30\r\2\u012e\u012f\7\22\2\2\u012f\u0131\5\30")
        buf.write("\r\2\u0130\u012e\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\u012c\3\2\2\2\u0135\u0136\3\2\2\2")
        buf.write("\u0136\u0137\3\2\2\2\u0137\u013b\7\21\2\2\u0138\u013a")
        buf.write("\5\32\16\2\u0139\u0138\3\2\2\2\u013a\u013d\3\2\2\2\u013b")
        buf.write("\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2")
        buf.write("\u013d\u013b\3\2\2\2\u013e\u013f\7\23\2\2\u013f\27\3\2")
        buf.write("\2\2\u0140\u0146\5H%\2\u0141\u0143\7\31\2\2\u0142\u0144")
        buf.write("\5\u0086D\2\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0145\3\2\2\2\u0145\u0147\7\32\2\2\u0146\u0141\3\2\2")
        buf.write("\2\u0146\u0147\3\2\2\2\u0147\31\3\2\2\2\u0148\u0151\5")
        buf.write("\34\17\2\u0149\u0151\5\"\22\2\u014a\u0151\5$\23\2\u014b")
        buf.write("\u0151\5&\24\2\u014c\u0151\5*\26\2\u014d\u0151\5\62\32")
        buf.write("\2\u014e\u0151\5\66\34\2\u014f\u0151\5 \21\2\u0150\u0148")
        buf.write("\3\2\2\2\u0150\u0149\3\2\2\2\u0150\u014a\3\2\2\2\u0150")
        buf.write("\u014b\3\2\2\2\u0150\u014c\3\2\2\2\u0150\u014d\3\2\2\2")
        buf.write("\u0150\u014e\3\2\2\2\u0150\u014f\3\2\2\2\u0151\33\3\2")
        buf.write("\2\2\u0152\u015b\5F$\2\u0153\u015a\7{\2\2\u0154\u015a")
        buf.write("\7x\2\2\u0155\u015a\7z\2\2\u0156\u015a\7r\2\2\u0157\u015a")
        buf.write("\7s\2\2\u0158\u015a\5\u00c6d\2\u0159\u0153\3\2\2\2\u0159")
        buf.write("\u0154\3\2\2\2\u0159\u0155\3\2\2\2\u0159\u0156\3\2\2\2")
        buf.write("\u0159\u0157\3\2\2\2\u0159\u0158\3\2\2\2\u015a\u015d\3")
        buf.write("\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015e")
        buf.write("\3\2\2\2\u015d\u015b\3\2\2\2\u015e\u0161\5\u00be`\2\u015f")
        buf.write("\u0160\7\f\2\2\u0160\u0162\5\u0082B\2\u0161\u015f\3\2")
        buf.write("\2\2\u0161\u0162\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164")
        buf.write("\7\4\2\2\u0164\35\3\2\2\2\u0165\u0166\5F$\2\u0166\u0167")
        buf.write("\7r\2\2\u0167\u0168\5\u00be`\2\u0168\u0169\7\f\2\2\u0169")
        buf.write("\u016a\5\u0082B\2\u016a\u016b\7\4\2\2\u016b\37\3\2\2\2")
        buf.write("\u016c\u016d\7\33\2\2\u016d\u016e\5\u00be`\2\u016e\u016f")
        buf.write("\58\35\2\u016f\u0170\7\4\2\2\u0170!\3\2\2\2\u0171\u0172")
        buf.write("\7\34\2\2\u0172\u0173\5\u00be`\2\u0173\u0176\7\35\2\2")
        buf.write("\u0174\u0177\7\17\2\2\u0175\u0177\5F$\2\u0176\u0174\3")
        buf.write("\2\2\2\u0176\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179")
        buf.write("\7\4\2\2\u0179#\3\2\2\2\u017a\u017b\7\36\2\2\u017b\u017c")
        buf.write("\5\u00be`\2\u017c\u0187\7\21\2\2\u017d\u017e\5D#\2\u017e")
        buf.write("\u0184\7\4\2\2\u017f\u0180\5D#\2\u0180\u0181\7\4\2\2\u0181")
        buf.write("\u0183\3\2\2\2\u0182\u017f\3\2\2\2\u0183\u0186\3\2\2\2")
        buf.write("\u0184\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0188\3")
        buf.write("\2\2\2\u0186\u0184\3\2\2\2\u0187\u017d\3\2\2\2\u0187\u0188")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\7\23\2\2\u018a")
        buf.write("%\3\2\2\2\u018b\u018c\7\37\2\2\u018c\u018e\5\u00be`\2")
        buf.write("\u018d\u018f\58\35\2\u018e\u018d\3\2\2\2\u018e\u018f\3")
        buf.write("\2\2\2\u018f\u0194\3\2\2\2\u0190\u0193\7|\2\2\u0191\u0193")
        buf.write("\5\u00c6d\2\u0192\u0190\3\2\2\2\u0192\u0191\3\2\2\2\u0193")
        buf.write("\u0196\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195\3\2\2\2")
        buf.write("\u0195\u0199\3\2\2\2\u0196\u0194\3\2\2\2\u0197\u019a\7")
        buf.write("\4\2\2\u0198\u019a\5T+\2\u0199\u0197\3\2\2\2\u0199\u0198")
        buf.write("\3\2\2\2\u019a\'\3\2\2\2\u019b\u01a1\5\u00be`\2\u019c")
        buf.write("\u019e\7\31\2\2\u019d\u019f\5\u0086D\2\u019e\u019d\3\2")
        buf.write("\2\2\u019e\u019f\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a2")
        buf.write("\7\32\2\2\u01a1\u019c\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2")
        buf.write(")\3\2\2\2\u01a3\u01a4\5,\27\2\u01a4\u01a5\58\35\2\u01a5")
        buf.write("\u01a7\5\60\31\2\u01a6\u01a8\5.\30\2\u01a7\u01a6\3\2\2")
        buf.write("\2\u01a7\u01a8\3\2\2\2\u01a8\u01ab\3\2\2\2\u01a9\u01ac")
        buf.write("\7\4\2\2\u01aa\u01ac\5T+\2\u01ab\u01a9\3\2\2\2\u01ab\u01aa")
        buf.write("\3\2\2\2\u01ac+\3\2\2\2\u01ad\u01af\7 \2\2\u01ae\u01b0")
        buf.write("\5\u00be`\2\u01af\u01ae\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0")
        buf.write("\u01b5\3\2\2\2\u01b1\u01b5\7\u0080\2\2\u01b2\u01b5\7\u0081")
        buf.write("\2\2\u01b3\u01b5\7\u0082\2\2\u01b4\u01ad\3\2\2\2\u01b4")
        buf.write("\u01b1\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2")
        buf.write("\u01b5-\3\2\2\2\u01b6\u01b7\7!\2\2\u01b7\u01b8\58\35\2")
        buf.write("\u01b8/\3\2\2\2\u01b9\u01bf\5\u00c2b\2\u01ba\u01bf\7|")
        buf.write("\2\2\u01bb\u01bf\5R*\2\u01bc\u01bf\5(\25\2\u01bd\u01bf")
        buf.write("\5\u00c6d\2\u01be\u01b9\3\2\2\2\u01be\u01ba\3\2\2\2\u01be")
        buf.write("\u01bb\3\2\2\2\u01be\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2")
        buf.write("\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3")
        buf.write("\2\2\2\u01c1\61\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01c4")
        buf.write("\7\"\2\2\u01c4\u01c5\5\u00be`\2\u01c5\u01c7\5<\37\2\u01c6")
        buf.write("\u01c8\7p\2\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\u01ca\7\4\2\2\u01ca\63\3\2")
        buf.write("\2\2\u01cb\u01cc\5\u00be`\2\u01cc\65\3\2\2\2\u01cd\u01ce")
        buf.write("\7#\2\2\u01ce\u01cf\5\u00be`\2\u01cf\u01d1\7\21\2\2\u01d0")
        buf.write("\u01d2\5\64\33\2\u01d1\u01d0\3\2\2\2\u01d1\u01d2\3\2\2")
        buf.write("\2\u01d2\u01d7\3\2\2\2\u01d3\u01d4\7\22\2\2\u01d4\u01d6")
        buf.write("\5\64\33\2\u01d5\u01d3\3\2\2\2\u01d6\u01d9\3\2\2\2\u01d7")
        buf.write("\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da\3\2\2\2")
        buf.write("\u01d9\u01d7\3\2\2\2\u01da\u01db\7\23\2\2\u01db\67\3\2")
        buf.write("\2\2\u01dc\u01e5\7\31\2\2\u01dd\u01e2\5:\36\2\u01de\u01df")
        buf.write("\7\22\2\2\u01df\u01e1\5:\36\2\u01e0\u01de\3\2\2\2\u01e1")
        buf.write("\u01e4\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2")
        buf.write("\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01dd\3")
        buf.write("\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8")
        buf.write("\7\32\2\2\u01e89\3\2\2\2\u01e9\u01eb\5F$\2\u01ea\u01ec")
        buf.write("\5P)\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ee")
        buf.write("\3\2\2\2\u01ed\u01ef\5\u00be`\2\u01ee\u01ed\3\2\2\2\u01ee")
        buf.write("\u01ef\3\2\2\2\u01ef;\3\2\2\2\u01f0\u01f9\7\31\2\2\u01f1")
        buf.write("\u01f6\5> \2\u01f2\u01f3\7\22\2\2\u01f3\u01f5\5> \2\u01f4")
        buf.write("\u01f2\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3\2\2\2")
        buf.write("\u01f6\u01f7\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3")
        buf.write("\2\2\2\u01f9\u01f1\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\u01fc\7\32\2\2\u01fc=\3\2\2\2\u01fd\u01ff")
        buf.write("\5F$\2\u01fe\u0200\7w\2\2\u01ff\u01fe\3\2\2\2\u01ff\u0200")
        buf.write("\3\2\2\2\u0200\u0202\3\2\2\2\u0201\u0203\5\u00be`\2\u0202")
        buf.write("\u0201\3\2\2\2\u0202\u0203\3\2\2\2\u0203?\3\2\2\2\u0204")
        buf.write("\u020d\7\31\2\2\u0205\u020a\5B\"\2\u0206\u0207\7\22\2")
        buf.write("\2\u0207\u0209\5B\"\2\u0208\u0206\3\2\2\2\u0209\u020c")
        buf.write("\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u0205\3\2\2\2")
        buf.write("\u020d\u020e\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0210\7")
        buf.write("\32\2\2\u0210A\3\2\2\2\u0211\u0213\5F$\2\u0212\u0214\5")
        buf.write("P)\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214C\3")
        buf.write("\2\2\2\u0215\u0217\5F$\2\u0216\u0218\5P)\2\u0217\u0216")
        buf.write("\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219\3\2\2\2\u0219")
        buf.write("\u021a\5\u00be`\2\u021aE\3\2\2\2\u021b\u021c\b$\1\2\u021c")
        buf.write("\u0223\5\u0080A\2\u021d\u0223\5H%\2\u021e\u0223\5L\'\2")
        buf.write("\u021f\u0223\5N(\2\u0220\u0221\7&\2\2\u0221\u0223\7y\2")
        buf.write("\2\u0222\u021b\3\2\2\2\u0222\u021d\3\2\2\2\u0222\u021e")
        buf.write("\3\2\2\2\u0222\u021f\3\2\2\2\u0222\u0220\3\2\2\2\u0223")
        buf.write("\u022c\3\2\2\2\u0224\u0225\f\5\2\2\u0225\u0227\7$\2\2")
        buf.write("\u0226\u0228\5\u0082B\2\u0227\u0226\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u022b\7%\2\2\u022a")
        buf.write("\u0224\3\2\2\2\u022b\u022e\3\2\2\2\u022c\u022a\3\2\2\2")
        buf.write("\u022c\u022d\3\2\2\2\u022dG\3\2\2\2\u022e\u022c\3\2\2")
        buf.write("\2\u022f\u0234\5\u00be`\2\u0230\u0231\7\'\2\2\u0231\u0233")
        buf.write("\5\u00be`\2\u0232\u0230\3\2\2\2\u0233\u0236\3\2\2\2\u0234")
        buf.write("\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235I\3\2\2\2\u0236")
        buf.write("\u0234\3\2\2\2\u0237\u023a\5\u0080A\2\u0238\u023a\5H%")
        buf.write("\2\u0239\u0237\3\2\2\2\u0239\u0238\3\2\2\2\u023aK\3\2")
        buf.write("\2\2\u023b\u023c\7(\2\2\u023c\u023d\7\31\2\2\u023d\u023e")
        buf.write("\5J&\2\u023e\u023f\7)\2\2\u023f\u0240\5F$\2\u0240\u0241")
        buf.write("\7\32\2\2\u0241M\3\2\2\2\u0242\u0243\7 \2\2\u0243\u0249")
        buf.write("\5@!\2\u0244\u0248\7x\2\2\u0245\u0248\7v\2\2\u0246\u0248")
        buf.write("\5R*\2\u0247\u0244\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0246")
        buf.write("\3\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2\u0249")
        buf.write("\u024a\3\2\2\2\u024a\u024e\3\2\2\2\u024b\u0249\3\2\2\2")
        buf.write("\u024c\u024d\7!\2\2\u024d\u024f\5@!\2\u024e\u024c\3\2")
        buf.write("\2\2\u024e\u024f\3\2\2\2\u024fO\3\2\2\2\u0250\u0251\t")
        buf.write("\4\2\2\u0251Q\3\2\2\2\u0252\u0253\t\5\2\2\u0253S\3\2\2")
        buf.write("\2\u0254\u0258\7\21\2\2\u0255\u0257\5V,\2\u0256\u0255")
        buf.write("\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258")
        buf.write("\u0259\3\2\2\2\u0259\u025b\3\2\2\2\u025a\u0258\3\2\2\2")
        buf.write("\u025b\u025c\7\23\2\2\u025cU\3\2\2\2\u025d\u026e\5Z.\2")
        buf.write("\u025e\u026e\5\\/\2\u025f\u026e\5`\61\2\u0260\u026e\5")
        buf.write("h\65\2\u0261\u026e\5T+\2\u0262\u026e\5f\64\2\u0263\u026e")
        buf.write("\5j\66\2\u0264\u026e\5l\67\2\u0265\u026e\5n8\2\u0266\u026e")
        buf.write("\5p9\2\u0267\u026e\5r:\2\u0268\u026e\5t;\2\u0269\u026e")
        buf.write("\5v<\2\u026a\u026e\5b\62\2\u026b\u026e\5d\63\2\u026c\u026e")
        buf.write("\5x=\2\u026d\u025d\3\2\2\2\u026d\u025e\3\2\2\2\u026d\u025f")
        buf.write("\3\2\2\2\u026d\u0260\3\2\2\2\u026d\u0261\3\2\2\2\u026d")
        buf.write("\u0262\3\2\2\2\u026d\u0263\3\2\2\2\u026d\u0264\3\2\2\2")
        buf.write("\u026d\u0265\3\2\2\2\u026d\u0266\3\2\2\2\u026d\u0267\3")
        buf.write("\2\2\2\u026d\u0268\3\2\2\2\u026d\u0269\3\2\2\2\u026d\u026a")
        buf.write("\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026e")
        buf.write("W\3\2\2\2\u026f\u0270\5\u0082B\2\u0270\u0271\7\4\2\2\u0271")
        buf.write("Y\3\2\2\2\u0272\u0273\7-\2\2\u0273\u0274\7\31\2\2\u0274")
        buf.write("\u0275\5\u0082B\2\u0275\u0276\7\32\2\2\u0276\u0279\5V")
        buf.write(",\2\u0277\u0278\7.\2\2\u0278\u027a\5V,\2\u0279\u0277\3")
        buf.write("\2\2\2\u0279\u027a\3\2\2\2\u027a[\3\2\2\2\u027b\u027c")
        buf.write("\7/\2\2\u027c\u027e\5\u0082B\2\u027d\u027f\5.\30\2\u027e")
        buf.write("\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0280\3\2\2\2")
        buf.write("\u0280\u0282\5T+\2\u0281\u0283\5^\60\2\u0282\u0281\3\2")
        buf.write("\2\2\u0283\u0284\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285")
        buf.write("\3\2\2\2\u0285]\3\2\2\2\u0286\u028b\7\60\2\2\u0287\u0289")
        buf.write("\5\u00be`\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028c\58\35\2\u028b\u0288\3\2\2\2")
        buf.write("\u028b\u028c\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e\5")
        buf.write("T+\2\u028e_\3\2\2\2\u028f\u0290\7\61\2\2\u0290\u0291\7")
        buf.write("\31\2\2\u0291\u0292\5\u0082B\2\u0292\u0293\7\32\2\2\u0293")
        buf.write("\u0294\5V,\2\u0294a\3\2\2\2\u0295\u0298\5z>\2\u0296\u0298")
        buf.write("\5X-\2\u0297\u0295\3\2\2\2\u0297\u0296\3\2\2\2\u0298c")
        buf.write("\3\2\2\2\u0299\u029a\7\62\2\2\u029a\u029b\5T+\2\u029b")
        buf.write("e\3\2\2\2\u029c\u029e\7\63\2\2\u029d\u029f\7\4\2\2\u029e")
        buf.write("\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029fg\3\2\2\2\u02a0")
        buf.write("\u02a1\7\35\2\2\u02a1\u02a4\7\31\2\2\u02a2\u02a5\5b\62")
        buf.write("\2\u02a3\u02a5\7\4\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a3")
        buf.write("\3\2\2\2\u02a5\u02a8\3\2\2\2\u02a6\u02a9\5X-\2\u02a7\u02a9")
        buf.write("\7\4\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a7\3\2\2\2\u02a9")
        buf.write("\u02ab\3\2\2\2\u02aa\u02ac\5\u0082B\2\u02ab\u02aa\3\2")
        buf.write("\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae")
        buf.write("\7\32\2\2\u02ae\u02af\5V,\2\u02afi\3\2\2\2\u02b0\u02b2")
        buf.write("\7\64\2\2\u02b1\u02b3\7\u0084\2\2\u02b2\u02b1\3\2\2\2")
        buf.write("\u02b2\u02b3\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\5")
        buf.write("\u0092J\2\u02b5k\3\2\2\2\u02b6\u02b7\7\65\2\2\u02b7\u02b8")
        buf.write("\5V,\2\u02b8\u02b9\7\61\2\2\u02b9\u02ba\7\31\2\2\u02ba")
        buf.write("\u02bb\5\u0082B\2\u02bb\u02bc\7\32\2\2\u02bc\u02bd\7\4")
        buf.write("\2\2\u02bdm\3\2\2\2\u02be\u02bf\7t\2\2\u02bf\u02c0\7\4")
        buf.write("\2\2\u02c0o\3\2\2\2\u02c1\u02c2\7q\2\2\u02c2\u02c3\7\4")
        buf.write("\2\2\u02c3q\3\2\2\2\u02c4\u02c6\7\66\2\2\u02c5\u02c7\5")
        buf.write("\u0082B\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02c9\7\4\2\2\u02c9s\3\2\2\2\u02ca")
        buf.write("\u02cb\7\67\2\2\u02cb\u02cc\7\4\2\2\u02ccu\3\2\2\2\u02cd")
        buf.write("\u02ce\78\2\2\u02ce\u02cf\5\u0090I\2\u02cf\u02d0\7\4\2")
        buf.write("\2\u02d0w\3\2\2\2\u02d1\u02d2\79\2\2\u02d2\u02d3\5\u0090")
        buf.write("I\2\u02d3\u02d4\7\4\2\2\u02d4y\3\2\2\2\u02d5\u02d6\7:")
        buf.write("\2\2\u02d6\u02dd\5~@\2\u02d7\u02dd\5D#\2\u02d8\u02d9\7")
        buf.write("\31\2\2\u02d9\u02da\5|?\2\u02da\u02db\7\32\2\2\u02db\u02dd")
        buf.write("\3\2\2\2\u02dc\u02d5\3\2\2\2\u02dc\u02d7\3\2\2\2\u02dc")
        buf.write("\u02d8\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de\u02df\7\f\2\2")
        buf.write("\u02df\u02e1\5\u0082B\2\u02e0\u02de\3\2\2\2\u02e0\u02e1")
        buf.write("\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\7\4\2\2\u02e3")
        buf.write("{\3\2\2\2\u02e4\u02e6\5D#\2\u02e5\u02e4\3\2\2\2\u02e5")
        buf.write("\u02e6\3\2\2\2\u02e6\u02ed\3\2\2\2\u02e7\u02e9\7\22\2")
        buf.write("\2\u02e8\u02ea\5D#\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea\3")
        buf.write("\2\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e7\3\2\2\2\u02ec\u02ef")
        buf.write("\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("}\3\2\2\2\u02ef\u02ed\3\2\2\2\u02f0\u02f7\7\31\2\2\u02f1")
        buf.write("\u02f3\5\u00be`\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3\3\2")
        buf.write("\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f6\7\22\2\2\u02f5\u02f2")
        buf.write("\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02fa\u02fc\5\u00be`\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc")
        buf.write("\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\7\32\2\2\u02fe")
        buf.write("\177\3\2\2\2\u02ff\u0300\t\6\2\2\u0300\u0081\3\2\2\2\u0301")
        buf.write("\u0302\bB\1\2\u0302\u0303\7@\2\2\u0303\u031e\5F$\2\u0304")
        buf.write("\u0305\7y\2\2\u0305\u0306\7\31\2\2\u0306\u0307\5\u0082")
        buf.write("B\2\u0307\u0308\7\32\2\2\u0308\u031e\3\2\2\2\u0309\u030a")
        buf.write("\5\u0080A\2\u030a\u030b\7\31\2\2\u030b\u030c\5\u0082B")
        buf.write("\2\u030c\u030d\7\32\2\2\u030d\u031e\3\2\2\2\u030e\u030f")
        buf.write("\7\31\2\2\u030f\u0310\5\u0082B\2\u0310\u0311\7\32\2\2")
        buf.write("\u0311\u031e\3\2\2\2\u0312\u0313\t\7\2\2\u0313\u031e\5")
        buf.write("\u0082B\25\u0314\u0315\t\b\2\2\u0315\u031e\5\u0082B\24")
        buf.write("\u0316\u0317\t\t\2\2\u0317\u031e\5\u0082B\23\u0318\u0319")
        buf.write("\7F\2\2\u0319\u031e\5\u0082B\22\u031a\u031b\7\7\2\2\u031b")
        buf.write("\u031e\5\u0082B\21\u031c\u031e\5\u0084C\2\u031d\u0301")
        buf.write("\3\2\2\2\u031d\u0304\3\2\2\2\u031d\u0309\3\2\2\2\u031d")
        buf.write("\u030e\3\2\2\2\u031d\u0312\3\2\2\2\u031d\u0314\3\2\2\2")
        buf.write("\u031d\u0316\3\2\2\2\u031d\u0318\3\2\2\2\u031d\u031a\3")
        buf.write("\2\2\2\u031d\u031c\3\2\2\2\u031e\u036d\3\2\2\2\u031f\u0320")
        buf.write("\f\20\2\2\u0320\u0321\7G\2\2\u0321\u036c\5\u0082B\21\u0322")
        buf.write("\u0323\f\17\2\2\u0323\u0324\t\n\2\2\u0324\u036c\5\u0082")
        buf.write("B\20\u0325\u0326\f\16\2\2\u0326\u0327\t\b\2\2\u0327\u036c")
        buf.write("\5\u0082B\17\u0328\u0329\f\r\2\2\u0329\u032a\t\13\2\2")
        buf.write("\u032a\u036c\5\u0082B\16\u032b\u032c\f\f\2\2\u032c\u032d")
        buf.write("\7L\2\2\u032d\u036c\5\u0082B\r\u032e\u032f\f\13\2\2\u032f")
        buf.write("\u0330\7\6\2\2\u0330\u036c\5\u0082B\f\u0331\u0332\f\n")
        buf.write("\2\2\u0332\u0333\7M\2\2\u0333\u036c\5\u0082B\13\u0334")
        buf.write("\u0335\f\t\2\2\u0335\u0336\t\f\2\2\u0336\u036c\5\u0082")
        buf.write("B\n\u0337\u0338\f\b\2\2\u0338\u0339\t\r\2\2\u0339\u036c")
        buf.write("\5\u0082B\t\u033a\u033b\f\7\2\2\u033b\u033c\7P\2\2\u033c")
        buf.write("\u036c\5\u0082B\b\u033d\u033e\f\6\2\2\u033e\u033f\7\5")
        buf.write("\2\2\u033f\u036c\5\u0082B\7\u0340\u0341\f\5\2\2\u0341")
        buf.write("\u0342\7Q\2\2\u0342\u0343\5\u0082B\2\u0343\u0344\7A\2")
        buf.write("\2\u0344\u0345\5\u0082B\6\u0345\u036c\3\2\2\2\u0346\u0347")
        buf.write("\f\4\2\2\u0347\u0348\t\16\2\2\u0348\u036c\5\u0082B\5\u0349")
        buf.write("\u034a\f\37\2\2\u034a\u036c\t\7\2\2\u034b\u034c\f\35\2")
        buf.write("\2\u034c\u034e\7$\2\2\u034d\u034f\5\u0082B\2\u034e\u034d")
        buf.write("\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u036c\7%\2\2\u0351\u0352\f\34\2\2\u0352\u0354\7$\2\2")
        buf.write("\u0353\u0355\5\u0082B\2\u0354\u0353\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0358\7A\2\2\u0357")
        buf.write("\u0359\5\u0082B\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2")
        buf.write("\2\2\u0359\u035a\3\2\2\2\u035a\u036c\7%\2\2\u035b\u035c")
        buf.write("\f\33\2\2\u035c\u035d\7\'\2\2\u035d\u036c\5\u00be`\2\u035e")
        buf.write("\u035f\f\30\2\2\u035f\u0360\7\21\2\2\u0360\u0361\5\u0088")
        buf.write("E\2\u0361\u0362\7\23\2\2\u0362\u036c\3\2\2\2\u0363\u0365")
        buf.write("\f\27\2\2\u0364\u0366\5\u008cG\2\u0365\u0364\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\7\31\2")
        buf.write("\2\u0368\u0369\5\u008eH\2\u0369\u036a\7\32\2\2\u036a\u036c")
        buf.write("\3\2\2\2\u036b\u031f\3\2\2\2\u036b\u0322\3\2\2\2\u036b")
        buf.write("\u0325\3\2\2\2\u036b\u0328\3\2\2\2\u036b\u032b\3\2\2\2")
        buf.write("\u036b\u032e\3\2\2\2\u036b\u0331\3\2\2\2\u036b\u0334\3")
        buf.write("\2\2\2\u036b\u0337\3\2\2\2\u036b\u033a\3\2\2\2\u036b\u033d")
        buf.write("\3\2\2\2\u036b\u0340\3\2\2\2\u036b\u0346\3\2\2\2\u036b")
        buf.write("\u0349\3\2\2\2\u036b\u034b\3\2\2\2\u036b\u0351\3\2\2\2")
        buf.write("\u036b\u035b\3\2\2\2\u036b\u035e\3\2\2\2\u036b\u0363\3")
        buf.write("\2\2\2\u036c\u036f\3\2\2\2\u036d\u036b\3\2\2\2\u036d\u036e")
        buf.write("\3\2\2\2\u036e\u0083\3\2\2\2\u036f\u036d\3\2\2\2\u0370")
        buf.write("\u0382\7~\2\2\u0371\u0382\7y\2\2\u0372\u0382\7j\2\2\u0373")
        buf.write("\u0382\5\u00bc_\2\u0374\u0382\5\u00c0a\2\u0375\u0382\5")
        buf.write("\u00b8]\2\u0376\u0379\5\u00ba^\2\u0377\u0378\7$\2\2\u0378")
        buf.write("\u037a\7%\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3\2\2\2")
        buf.write("\u037a\u0382\3\2\2\2\u037b\u037e\5\u00be`\2\u037c\u037d")
        buf.write("\7$\2\2\u037d\u037f\7%\2\2\u037e\u037c\3\2\2\2\u037e\u037f")
        buf.write("\3\2\2\2\u037f\u0382\3\2\2\2\u0380\u0382\5\u00c8e\2\u0381")
        buf.write("\u0370\3\2\2\2\u0381\u0371\3\2\2\2\u0381\u0372\3\2\2\2")
        buf.write("\u0381\u0373\3\2\2\2\u0381\u0374\3\2\2\2\u0381\u0375\3")
        buf.write("\2\2\2\u0381\u0376\3\2\2\2\u0381\u037b\3\2\2\2\u0381\u0380")
        buf.write("\3\2\2\2\u0382\u0085\3\2\2\2\u0383\u0388\5\u0082B\2\u0384")
        buf.write("\u0385\7\22\2\2\u0385\u0387\5\u0082B\2\u0386\u0384\3\2")
        buf.write("\2\2\u0387\u038a\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389")
        buf.write("\3\2\2\2\u0389\u0087\3\2\2\2\u038a\u0388\3\2\2\2\u038b")
        buf.write("\u0390\5\u008aF\2\u038c\u038d\7\22\2\2\u038d\u038f\5\u008a")
        buf.write("F\2\u038e\u038c\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e")
        buf.write("\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0394\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0393\u0395\7\22\2\2\u0394\u0393\3\2\2")
        buf.write("\2\u0394\u0395\3\2\2\2\u0395\u0089\3\2\2\2\u0396\u0397")
        buf.write("\5\u00be`\2\u0397\u0398\7A\2\2\u0398\u0399\5\u0082B\2")
        buf.write("\u0399\u008b\3\2\2\2\u039a\u039c\7\21\2\2\u039b\u039d")
        buf.write("\5\u0088E\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u039f\7\23\2\2\u039f\u008d\3\2\2")
        buf.write("\2\u03a0\u03a2\7\21\2\2\u03a1\u03a3\5\u0088E\2\u03a2\u03a1")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write("\u03a9\7\23\2\2\u03a5\u03a7\5\u0086D\2\u03a6\u03a5\3\2")
        buf.write("\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a9\3\2\2\2\u03a8\u03a0")
        buf.write("\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u008f\3\2\2\2\u03aa")
        buf.write("\u03ab\5\u0082B\2\u03ab\u03ac\7\31\2\2\u03ac\u03ad\5\u008e")
        buf.write("H\2\u03ad\u03ae\7\32\2\2\u03ae\u0091\3\2\2\2\u03af\u03b3")
        buf.write("\7\21\2\2\u03b0\u03b2\5\u0094K\2\u03b1\u03b0\3\2\2\2\u03b2")
        buf.write("\u03b5\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2")
        buf.write("\u03b4\u03b6\3\2\2\2\u03b5\u03b3\3\2\2\2\u03b6\u03b7\7")
        buf.write("\23\2\2\u03b7\u0093\3\2\2\2\u03b8\u03cb\5\u00be`\2\u03b9")
        buf.write("\u03cb\5\u0092J\2\u03ba\u03cb\5\u0096L\2\u03bb\u03cb\5")
        buf.write("\u009cO\2\u03bc\u03cb\5\u009eP\2\u03bd\u03cb\5\u00a4S")
        buf.write("\2\u03be\u03cb\5\u00a6T\2\u03bf\u03cb\5\u00a8U\2\u03c0")
        buf.write("\u03cb\5\u00acW\2\u03c1\u03cb\5\u00b0Y\2\u03c2\u03cb\5")
        buf.write("\u00b2Z\2\u03c3\u03cb\7q\2\2\u03c4\u03cb\7t\2\2\u03c5")
        buf.write("\u03cb\7u\2\2\u03c6\u03cb\5\u00b6\\\2\u03c7\u03cb\5\u00bc")
        buf.write("_\2\u03c8\u03cb\5\u00c8e\2\u03c9\u03cb\5\u00c0a\2\u03ca")
        buf.write("\u03b8\3\2\2\2\u03ca\u03b9\3\2\2\2\u03ca\u03ba\3\2\2\2")
        buf.write("\u03ca\u03bb\3\2\2\2\u03ca\u03bc\3\2\2\2\u03ca\u03bd\3")
        buf.write("\2\2\2\u03ca\u03be\3\2\2\2\u03ca\u03bf\3\2\2\2\u03ca\u03c0")
        buf.write("\3\2\2\2\u03ca\u03c1\3\2\2\2\u03ca\u03c2\3\2\2\2\u03ca")
        buf.write("\u03c3\3\2\2\2\u03ca\u03c4\3\2\2\2\u03ca\u03c5\3\2\2\2")
        buf.write("\u03ca\u03c6\3\2\2\2\u03ca\u03c7\3\2\2\2\u03ca\u03c8\3")
        buf.write("\2\2\2\u03ca\u03c9\3\2\2\2\u03cb\u0095\3\2\2\2\u03cc\u03d0")
        buf.write("\5\u009aN\2\u03cd\u03d0\5\u00b4[\2\u03ce\u03d0\5\u0098")
        buf.write("M\2\u03cf\u03cc\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03ce")
        buf.write("\3\2\2\2\u03d0\u0097\3\2\2\2\u03d1\u03d2\5\u00be`\2\u03d2")
        buf.write("\u03d3\7\'\2\2\u03d3\u03d4\5\u00be`\2\u03d4\u0099\3\2")
        buf.write("\2\2\u03d5\u03da\7\66\2\2\u03d6\u03da\7&\2\2\u03d7\u03da")
        buf.write("\7=\2\2\u03d8\u03da\5\u00be`\2\u03d9\u03d5\3\2\2\2\u03d9")
        buf.write("\u03d6\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2")
        buf.write("\u03da\u03e7\3\2\2\2\u03db\u03dd\7\31\2\2\u03dc\u03de")
        buf.write("\5\u0096L\2\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de")
        buf.write("\u03e3\3\2\2\2\u03df\u03e0\7\22\2\2\u03e0\u03e2\5\u0096")
        buf.write("L\2\u03e1\u03df\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1")
        buf.write("\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6\3\2\2\2\u03e5")
        buf.write("\u03e3\3\2\2\2\u03e6\u03e8\7\32\2\2\u03e7\u03db\3\2\2")
        buf.write("\2\u03e7\u03e8\3\2\2\2\u03e8\u009b\3\2\2\2\u03e9\u03ea")
        buf.write("\7\\\2\2\u03ea\u03ed\5\u00a0Q\2\u03eb\u03ec\7]\2\2\u03ec")
        buf.write("\u03ee\5\u0096L\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2")
        buf.write("\2\2\u03ee\u009d\3\2\2\2\u03ef\u03f0\5\u00a0Q\2\u03f0")
        buf.write("\u03f1\7]\2\2\u03f1\u03f2\5\u0096L\2\u03f2\u009f\3\2\2")
        buf.write("\2\u03f3\u03fa\5\u00be`\2\u03f4\u03fa\5\u0098M\2\u03f5")
        buf.write("\u03f6\7\31\2\2\u03f6\u03f7\5\u00a2R\2\u03f7\u03f8\7\32")
        buf.write("\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03f3\3\2\2\2\u03f9\u03f4")
        buf.write("\3\2\2\2\u03f9\u03f5\3\2\2\2\u03fa\u00a1\3\2\2\2\u03fb")
        buf.write("\u0400\5\u00be`\2\u03fc\u03fd\7\22\2\2\u03fd\u03ff\5\u00be")
        buf.write("`\2\u03fe\u03fc\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u00a3\3\2\2\2\u0402")
        buf.write("\u0400\3\2\2\2\u0403\u0404\7^\2\2\u0404\u0405\5\u00be")
        buf.write("`\2\u0405\u00a5\3\2\2\2\u0406\u0407\5\u00be`\2\u0407\u0408")
        buf.write("\7A\2\2\u0408\u00a7\3\2\2\2\u0409\u040a\7_\2\2\u040a\u040e")
        buf.write("\5\u0096L\2\u040b\u040d\5\u00aaV\2\u040c\u040b\3\2\2\2")
        buf.write("\u040d\u0410\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3")
        buf.write("\2\2\2\u040f\u00a9\3\2\2\2\u0410\u040e\3\2\2\2\u0411\u0412")
        buf.write("\7`\2\2\u0412\u0413\5\u00b4[\2\u0413\u0414\5\u0092J\2")
        buf.write("\u0414\u0418\3\2\2\2\u0415\u0416\7a\2\2\u0416\u0418\5")
        buf.write("\u0092J\2\u0417\u0411\3\2\2\2\u0417\u0415\3\2\2\2\u0418")
        buf.write("\u00ab\3\2\2\2\u0419\u041a\7 \2\2\u041a\u041b\5\u00be")
        buf.write("`\2\u041b\u041d\7\31\2\2\u041c\u041e\5\u00a2R\2\u041d")
        buf.write("\u041c\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2")
        buf.write("\u041f\u0421\7\32\2\2\u0420\u0422\5\u00aeX\2\u0421\u0420")
        buf.write("\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423\3\2\2\2\u0423")
        buf.write("\u0424\5\u0092J\2\u0424\u00ad\3\2\2\2\u0425\u0426\7b\2")
        buf.write("\2\u0426\u0427\5\u00a2R\2\u0427\u00af\3\2\2\2\u0428\u042b")
        buf.write("\7\35\2\2\u0429\u042c\5\u0092J\2\u042a\u042c\5\u0096L")
        buf.write("\2\u042b\u0429\3\2\2\2\u042b\u042a\3\2\2\2\u042c\u042d")
        buf.write("\3\2\2\2\u042d\u0430\5\u0096L\2\u042e\u0431\5\u0092J\2")
        buf.write("\u042f\u0431\5\u0096L\2\u0430\u042e\3\2\2\2\u0430\u042f")
        buf.write("\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0433\5\u0092J\2\u0433")
        buf.write("\u00b1\3\2\2\2\u0434\u0435\7-\2\2\u0435\u0436\5\u0096")
        buf.write("L\2\u0436\u0437\5\u0092J\2\u0437\u00b3\3\2\2\2\u0438\u043d")
        buf.write("\5\u00c8e\2\u0439\u043d\7k\2\2\u043a\u043d\7l\2\2\u043b")
        buf.write("\u043d\5\u00c0a\2\u043c\u0438\3\2\2\2\u043c\u0439\3\2")
        buf.write("\2\2\u043c\u043a\3\2\2\2\u043c\u043b\3\2\2\2\u043d\u00b5")
        buf.write("\3\2\2\2\u043e\u043f\7\64\2\2\u043f\u0440\5\u00be`\2\u0440")
        buf.write("\u0441\5\u0092J\2\u0441\u00b7\3\2\2\2\u0442\u044f\7\31")
        buf.write("\2\2\u0443\u0445\5\u0082B\2\u0444\u0443\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445\u044c\3\2\2\2\u0446\u0448\7\22\2")
        buf.write("\2\u0447\u0449\5\u0082B\2\u0448\u0447\3\2\2\2\u0448\u0449")
        buf.write("\3\2\2\2\u0449\u044b\3\2\2\2\u044a\u0446\3\2\2\2\u044b")
        buf.write("\u044e\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2")
        buf.write("\u044d\u0450\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0444\3")
        buf.write("\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u045f")
        buf.write("\7\32\2\2\u0452\u045b\7$\2\2\u0453\u0458\5\u0082B\2\u0454")
        buf.write("\u0455\7\22\2\2\u0455\u0457\5\u0082B\2\u0456\u0454\3\2")
        buf.write("\2\2\u0457\u045a\3\2\2\2\u0458\u0456\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045c\3\2\2\2\u045a\u0458\3\2\2\2\u045b")
        buf.write("\u0453\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d\3\2\2\2")
        buf.write("\u045d\u045f\7%\2\2\u045e\u0442\3\2\2\2\u045e\u0452\3")
        buf.write("\2\2\2\u045f\u00b9\3\2\2\2\u0460\u0463\5\u0080A\2\u0461")
        buf.write("\u0463\5H%\2\u0462\u0460\3\2\2\2\u0462\u0461\3\2\2\2\u0463")
        buf.write("\u00bb\3\2\2\2\u0464\u0466\t\17\2\2\u0465\u0467\7m\2\2")
        buf.write("\u0466\u0465\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u00bd\3")
        buf.write("\2\2\2\u0468\u0471\5\u00c4c\2\u0469\u0471\7\20\2\2\u046a")
        buf.write("\u0471\7,\2\2\u046b\u0471\7\u0082\2\2\u046c\u0471\7c\2")
        buf.write("\2\u046d\u0471\79\2\2\u046e\u0471\7\33\2\2\u046f\u0471")
        buf.write("\7\u0083\2\2\u0470\u0468\3\2\2\2\u0470\u0469\3\2\2\2\u0470")
        buf.write("\u046a\3\2\2\2\u0470\u046b\3\2\2\2\u0470\u046c\3\2\2\2")
        buf.write("\u0470\u046d\3\2\2\2\u0470\u046e\3\2\2\2\u0470\u046f\3")
        buf.write("\2\2\2\u0471\u00bf\3\2\2\2\u0472\u0474\7n\2\2\u0473\u0472")
        buf.write("\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0473\3\2\2\2\u0475")
        buf.write("\u0476\3\2\2\2\u0476\u00c1\3\2\2\2\u0477\u0478\t\20\2")
        buf.write("\2\u0478\u00c3\3\2\2\2\u0479\u048a\7p\2\2\u047a\u048a")
        buf.write("\7q\2\2\u047b\u048a\7r\2\2\u047c\u048a\7s\2\2\u047d\u048a")
        buf.write("\7t\2\2\u047e\u048a\7u\2\2\u047f\u048a\7w\2\2\u0480\u048a")
        buf.write("\5\u00c2b\2\u0481\u048a\7y\2\2\u0482\u048a\7|\2\2\u0483")
        buf.write("\u048a\7}\2\2\u0484\u048a\7~\2\2\u0485\u048a\7\177\2\2")
        buf.write("\u0486\u048a\7\u0080\2\2\u0487\u048a\7\u0081\2\2\u0488")
        buf.write("\u048a\7\u0082\2\2\u0489\u0479\3\2\2\2\u0489\u047a\3\2")
        buf.write("\2\2\u0489\u047b\3\2\2\2\u0489\u047c\3\2\2\2\u0489\u047d")
        buf.write("\3\2\2\2\u0489\u047e\3\2\2\2\u0489\u047f\3\2\2\2\u0489")
        buf.write("\u0480\3\2\2\2\u0489\u0481\3\2\2\2\u0489\u0482\3\2\2\2")
        buf.write("\u0489\u0483\3\2\2\2\u0489\u0484\3\2\2\2\u0489\u0485\3")
        buf.write("\2\2\2\u0489\u0486\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u0488")
        buf.write("\3\2\2\2\u048a\u00c5\3\2\2\2\u048b\u0497\7d\2\2\u048c")
        buf.write("\u048d\7\31\2\2\u048d\u0492\5H%\2\u048e\u048f\7\22\2\2")
        buf.write("\u048f\u0491\5H%\2\u0490\u048e\3\2\2\2\u0491\u0494\3\2")
        buf.write("\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495")
        buf.write("\3\2\2\2\u0494\u0492\3\2\2\2\u0495\u0496\7\32\2\2\u0496")
        buf.write("\u0498\3\2\2\2\u0497\u048c\3\2\2\2\u0497\u0498\3\2\2\2")
        buf.write("\u0498\u00c7\3\2\2\2\u0499\u049b\7\u0084\2\2\u049a\u0499")
        buf.write("\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049a\3\2\2\2\u049c")
        buf.write("\u049d\3\2\2\2\u049d\u00c9\3\2\2\2\u0087\u00d2\u00d4\u00e2")
        buf.write("\u00e6\u00eb\u00f1\u00f5\u00f8\u00fd\u0103\u010a\u010e")
        buf.write("\u011b\u0123\u0128\u0132\u0135\u013b\u0143\u0146\u0150")
        buf.write("\u0159\u015b\u0161\u0176\u0184\u0187\u018e\u0192\u0194")
        buf.write("\u0199\u019e\u01a1\u01a7\u01ab\u01af\u01b4\u01be\u01c0")
        buf.write("\u01c7\u01d1\u01d7\u01e2\u01e5\u01eb\u01ee\u01f6\u01f9")
        buf.write("\u01ff\u0202\u020a\u020d\u0213\u0217\u0222\u0227\u022c")
        buf.write("\u0234\u0239\u0247\u0249\u024e\u0258\u026d\u0279\u027e")
        buf.write("\u0284\u0288\u028b\u0297\u029e\u02a4\u02a8\u02ab\u02b2")
        buf.write("\u02c6\u02dc\u02e0\u02e5\u02e9\u02ed\u02f2\u02f7\u02fb")
        buf.write("\u031d\u034e\u0354\u0358\u0365\u036b\u036d\u0379\u037e")
        buf.write("\u0381\u0388\u0390\u0394\u039c\u03a2\u03a6\u03a8\u03b3")
        buf.write("\u03ca\u03cf\u03d9\u03dd\u03e3\u03e7\u03ed\u03f9\u0400")
        buf.write("\u040e\u0417\u041d\u0421\u042b\u0430\u043c\u0444\u0448")
        buf.write("\u044c\u044f\u0458\u045b\u045e\u0462\u0466\u0470\u0475")
        buf.write("\u0489\u0492\u0497\u049c")
        return buf.getvalue()


class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'||'", "'^'", "'~'", 
                     "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", 
                     "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'interface'", "'library'", "'is'", "'('", 
                     "')'", "'error'", "'using'", "'for'", "'struct'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'if'", "'else'", "'try'", 
                     "'catch'", "'while'", "'unchecked'", "'_'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'revert'", 
                     "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", 
                     "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", 
                     "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", 
                     "'|'", "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "'->'", "'callback'", "'override'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'immutable'", "'continue'", "'leave'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
                     "'view'", "'constructor'", "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Int", "Uint", 
                      "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", 
                      "HexNumber", "NumberUnit", "HexLiteralFragment", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_usingForDeclaration = 16
    RULE_structDefinition = 17
    RULE_modifierDefinition = 18
    RULE_modifierInvocation = 19
    RULE_functionDefinition = 20
    RULE_functionDescriptor = 21
    RULE_returnParameters = 22
    RULE_modifierList = 23
    RULE_eventDefinition = 24
    RULE_enumValue = 25
    RULE_enumDefinition = 26
    RULE_parameterList = 27
    RULE_parameter = 28
    RULE_eventParameterList = 29
    RULE_eventParameter = 30
    RULE_functionTypeParameterList = 31
    RULE_functionTypeParameter = 32
    RULE_variableDeclaration = 33
    RULE_typeName = 34
    RULE_userDefinedTypeName = 35
    RULE_mappingKey = 36
    RULE_mapping = 37
    RULE_functionTypeName = 38
    RULE_storageLocation = 39
    RULE_stateMutability = 40
    RULE_block = 41
    RULE_statement = 42
    RULE_expressionStatement = 43
    RULE_ifStatement = 44
    RULE_tryStatement = 45
    RULE_catchClause = 46
    RULE_whileStatement = 47
    RULE_simpleStatement = 48
    RULE_uncheckedStatement = 49
    RULE_placeholderStatement = 50
    RULE_forStatement = 51
    RULE_inlineAssemblyStatement = 52
    RULE_doWhileStatement = 53
    RULE_continueStatement = 54
    RULE_breakStatement = 55
    RULE_returnStatement = 56
    RULE_throwStatement = 57
    RULE_emitStatement = 58
    RULE_revertStatement = 59
    RULE_variableDeclarationStatement = 60
    RULE_variableDeclarationList = 61
    RULE_identifierList = 62
    RULE_elementaryTypeName = 63
    RULE_expression = 64
    RULE_primaryExpression = 65
    RULE_expressionList = 66
    RULE_nameValueList = 67
    RULE_nameValue = 68
    RULE_functionCallOptions = 69
    RULE_functionCallArguments = 70
    RULE_functionCall = 71
    RULE_assemblyBlock = 72
    RULE_assemblyItem = 73
    RULE_assemblyExpression = 74
    RULE_assemblyMember = 75
    RULE_assemblyCall = 76
    RULE_assemblyLocalDefinition = 77
    RULE_assemblyAssignment = 78
    RULE_assemblyIdentifierOrList = 79
    RULE_assemblyIdentifierList = 80
    RULE_assemblyStackAssignment = 81
    RULE_labelDefinition = 82
    RULE_assemblySwitch = 83
    RULE_assemblyCase = 84
    RULE_assemblyFunctionDefinition = 85
    RULE_assemblyFunctionReturns = 86
    RULE_assemblyFor = 87
    RULE_assemblyIf = 88
    RULE_assemblyLiteral = 89
    RULE_subAssembly = 90
    RULE_tupleExpression = 91
    RULE_typeNameExpression = 92
    RULE_numberLiteral = 93
    RULE_identifier = 94
    RULE_hexLiteral = 95
    RULE_visibilityKeyword = 96
    RULE_allKeywords = 97
    RULE_overrideSpecifier = 98
    RULE_stringLiteral = 99

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "usingForDeclaration", 
                   "structDefinition", "modifierDefinition", "modifierInvocation", 
                   "functionDefinition", "functionDescriptor", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mappingKey", "mapping", "functionTypeName", "storageLocation", 
                   "stateMutability", "block", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "uncheckedStatement", "placeholderStatement", 
                   "forStatement", "inlineAssemblyStatement", "doWhileStatement", 
                   "continueStatement", "breakStatement", "returnStatement", 
                   "throwStatement", "emitStatement", "revertStatement", 
                   "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallOptions", "functionCallArguments", 
                   "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier", "hexLiteral", "visibilityKeyword", "allKeywords", 
                   "overrideSpecifier", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    Int=99
    Uint=100
    Byte=101
    Fixed=102
    Ufixed=103
    BooleanLiteral=104
    DecimalNumber=105
    HexNumber=106
    NumberUnit=107
    HexLiteralFragment=108
    ReservedKeyword=109
    AnonymousKeyword=110
    BreakKeyword=111
    ConstantKeyword=112
    ImmutableKeyword=113
    ContinueKeyword=114
    LeaveKeyword=115
    ExternalKeyword=116
    IndexedKeyword=117
    InternalKeyword=118
    PayableKeyword=119
    PrivateKeyword=120
    PublicKeyword=121
    VirtualKeyword=122
    PureKeyword=123
    TypeKeyword=124
    ViewKeyword=125
    ConstructorKeyword=126
    FallbackKeyword=127
    ReceiveKeyword=128
    Identifier=129
    StringLiteralFragment=130
    VersionLiteral=131
    WS=132
    COMMENT=133
    LINE_COMMENT=134

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 201
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 202
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 203
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 204
                    self.structDefinition()
                    pass

                elif la_ == 6:
                    self.state = 205
                    self.functionDefinition()
                    pass

                elif la_ == 7:
                    self.state = 206
                    self.fileLevelConstant()
                    pass

                elif la_ == 8:
                    self.state = 207
                    self.customErrorDefinition()
                    pass


                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(SolidityParser.T__0)
            self.state = 216
            self.pragmaName()
            self.state = 217
            self.pragmaValue()
            self.state = 218
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 222
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 223
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.versionConstraint()
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0) or _la==SolidityParser.DecimalNumber or _la==SolidityParser.VersionLiteral:
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__2:
                    self.state = 227
                    self.match(SolidityParser.T__2)


                self.state = 230
                self.versionConstraint()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0):
                    self.state = 238
                    self.versionOperator()


                self.state = 241
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0):
                    self.state = 242
                    self.versionOperator()


                self.state = 245
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.identifier()
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__10:
                self.state = 249
                self.match(SolidityParser.T__10)
                self.state = 250
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.match(SolidityParser.T__11)
                self.state = 254
                self.importPath()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 255
                    self.match(SolidityParser.T__10)
                    self.state = 256
                    self.identifier()


                self.state = 259
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.match(SolidityParser.T__11)
                self.state = 264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__12]:
                    self.state = 262
                    self.match(SolidityParser.T__12)
                    pass
                elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__96, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                    self.state = 263
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 266
                    self.match(SolidityParser.T__10)
                    self.state = 267
                    self.identifier()


                self.state = 270
                self.match(SolidityParser.T__13)
                self.state = 271
                self.importPath()
                self.state = 272
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.match(SolidityParser.T__11)
                self.state = 275
                self.match(SolidityParser.T__14)
                self.state = 276
                self.importDeclaration()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 277
                    self.match(SolidityParser.T__15)
                    self.state = 278
                    self.importDeclaration()
                    self.state = 283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 284
                self.match(SolidityParser.T__16)
                self.state = 285
                self.match(SolidityParser.T__13)
                self.state = 286
                self.importPath()
                self.state = 287
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__17:
                self.state = 293
                self.match(SolidityParser.T__17)


            self.state = 296
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 297
            self.identifier()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 298
                self.match(SolidityParser.T__21)
                self.state = 299
                self.inheritanceSpecifier()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 300
                    self.match(SolidityParser.T__15)
                    self.state = 301
                    self.inheritanceSpecifier()
                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 309
            self.match(SolidityParser.T__14)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 310
                self.contractPart()
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.userDefinedTypeName()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 319
                self.match(SolidityParser.T__22)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                    self.state = 320
                    self.expressionList()


                self.state = 323
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 330
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 331
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 332
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 333
                self.customErrorDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.typeName(0)
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 343
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.PublicKeyword]:
                        self.state = 337
                        self.match(SolidityParser.PublicKeyword)
                        pass
                    elif token in [SolidityParser.InternalKeyword]:
                        self.state = 338
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.PrivateKeyword]:
                        self.state = 339
                        self.match(SolidityParser.PrivateKeyword)
                        pass
                    elif token in [SolidityParser.ConstantKeyword]:
                        self.state = 340
                        self.match(SolidityParser.ConstantKeyword)
                        pass
                    elif token in [SolidityParser.ImmutableKeyword]:
                        self.state = 341
                        self.match(SolidityParser.ImmutableKeyword)
                        pass
                    elif token in [SolidityParser.T__97]:
                        self.state = 342
                        self.overrideSpecifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 348
            self.identifier()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__9:
                self.state = 349
                self.match(SolidityParser.T__9)
                self.state = 350
                self.expression(0)


            self.state = 353
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileLevelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileLevelConstant" ):
                return visitor.visitFileLevelConstant(self)
            else:
                return visitor.visitChildren(self)




    def fileLevelConstant(self):

        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.typeName(0)
            self.state = 356
            self.match(SolidityParser.ConstantKeyword)
            self.state = 357
            self.identifier()
            self.state = 358
            self.match(SolidityParser.T__9)
            self.state = 359
            self.expression(0)
            self.state = 360
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomErrorDefinition" ):
                return visitor.visitCustomErrorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def customErrorDefinition(self):

        localctx = SolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(SolidityParser.T__24)
            self.state = 363
            self.identifier()
            self.state = 364
            self.parameterList()
            self.state = 365
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(SolidityParser.T__25)
            self.state = 368
            self.identifier()
            self.state = 369
            self.match(SolidityParser.T__26)
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__12]:
                self.state = 370
                self.match(SolidityParser.T__12)
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__35, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__96, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.state = 371
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 374
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(SolidityParser.T__27)
            self.state = 377
            self.identifier()
            self.state = 378
            self.match(SolidityParser.T__14)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 379
                self.variableDeclaration()
                self.state = 380
                self.match(SolidityParser.T__1)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                    self.state = 381
                    self.variableDeclaration()
                    self.state = 382
                    self.match(SolidityParser.T__1)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 391
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(SolidityParser.T__28)
            self.state = 394
            self.identifier()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 395
                self.parameterList()


            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__97 or _la==SolidityParser.VirtualKeyword:
                self.state = 400
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.VirtualKeyword]:
                    self.state = 398
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [SolidityParser.T__97]:
                    self.state = 399
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 405
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 406
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.identifier()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 410
                self.match(SolidityParser.T__22)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                    self.state = 411
                    self.expressionList()


                self.state = 414
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.functionDescriptor()
            self.state = 418
            self.parameterList()
            self.state = 419
            self.modifierList()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__30:
                self.state = 420
                self.returnParameters()


            self.state = 425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 423
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 424
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDescriptor" ):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.match(SolidityParser.T__29)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                    self.state = 428
                    self.identifier()


                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 433
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(SolidityParser.T__30)
            self.state = 437
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def visibilityKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityKeywordContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityKeywordContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.T__97 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.visibilityKeyword()
                    pass

                elif la_ == 2:
                    self.state = 440
                    self.match(SolidityParser.VirtualKeyword)
                    pass

                elif la_ == 3:
                    self.state = 441
                    self.stateMutability()
                    pass

                elif la_ == 4:
                    self.state = 442
                    self.modifierInvocation()
                    pass

                elif la_ == 5:
                    self.state = 443
                    self.overrideSpecifier()
                    pass


                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(SolidityParser.T__31)
            self.state = 450
            self.identifier()
            self.state = 451
            self.eventParameterList()
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.AnonymousKeyword:
                self.state = 452
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 455
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(SolidityParser.T__32)
            self.state = 460
            self.identifier()
            self.state = 461
            self.match(SolidityParser.T__14)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 462
                self.enumValue()


            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 465
                self.match(SolidityParser.T__15)
                self.state = 466
                self.enumValue()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(SolidityParser.T__22)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 475
                self.parameter()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 476
                    self.match(SolidityParser.T__15)
                    self.state = 477
                    self.parameter()
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 485
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.typeName(0)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 488
                self.storageLocation()


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 491
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(SolidityParser.T__22)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 495
                self.eventParameter()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 496
                    self.match(SolidityParser.T__15)
                    self.state = 497
                    self.eventParameter()
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 505
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.typeName(0)
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 508
                self.match(SolidityParser.IndexedKeyword)


            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 511
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameterList" ):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(SolidityParser.T__22)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 515
                self.functionTypeParameter()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 516
                    self.match(SolidityParser.T__15)
                    self.state = 517
                    self.functionTypeParameter()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 525
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameter" ):
                return visitor.visitFunctionTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.typeName(0)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__41))) != 0):
                self.state = 528
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.typeName(0)
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 532
                self.storageLocation()


            self.state = 535
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 538
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 539
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 540
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 541
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 542
                self.match(SolidityParser.T__35)
                self.state = 543
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 546
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 547
                    self.match(SolidityParser.T__33)
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                        self.state = 548
                        self.expression(0)


                    self.state = 551
                    self.match(SolidityParser.T__34) 
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.identifier()
            self.state = 562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 558
                    self.match(SolidityParser.T__36)
                    self.state = 559
                    self.identifier() 
                self.state = 564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKey" ):
                return visitor.visitMappingKey(self)
            else:
                return visitor.visitChildren(self)




    def mappingKey(self):

        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mappingKey)
        try:
            self.state = 567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__35, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.elementaryTypeName()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__96, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(SolidityParser.T__37)
            self.state = 570
            self.match(SolidityParser.T__22)
            self.state = 571
            self.mappingKey()
            self.state = 572
            self.match(SolidityParser.T__38)
            self.state = 573
            self.typeName(0)
            self.state = 574
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SolidityParser.T__29)
            self.state = 577
            self.functionTypeParameterList()
            self.state = 583
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 581
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.InternalKeyword]:
                        self.state = 578
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 579
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                        self.state = 580
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 586
                self.match(SolidityParser.T__30)
                self.state = 587
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__41))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            _la = self._input.LA(1)
            if not(((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & ((1 << (SolidityParser.ConstantKeyword - 112)) | (1 << (SolidityParser.PayableKeyword - 112)) | (1 << (SolidityParser.PureKeyword - 112)) | (1 << (SolidityParser.ViewKeyword - 112)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(SolidityParser.T__14)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__14 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__26 - 5)) | (1 << (SolidityParser.T__29 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__37 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__42 - 5)) | (1 << (SolidityParser.T__44 - 5)) | (1 << (SolidityParser.T__46 - 5)) | (1 << (SolidityParser.T__47 - 5)) | (1 << (SolidityParser.T__48 - 5)) | (1 << (SolidityParser.T__49 - 5)) | (1 << (SolidityParser.T__50 - 5)) | (1 << (SolidityParser.T__51 - 5)) | (1 << (SolidityParser.T__52 - 5)) | (1 << (SolidityParser.T__53 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                self.state = 595
                self.statement()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def placeholderStatement(self):
            return self.getTypedRuleContext(SolidityParser.PlaceholderStatementContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement)
        try:
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 606
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 607
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 608
                self.placeholderStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 609
                self.inlineAssemblyStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 610
                self.doWhileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 611
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 612
                self.breakStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 613
                self.returnStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 614
                self.throwStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 615
                self.emitStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 616
                self.simpleStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 617
                self.uncheckedStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 618
                self.revertStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.expression(0)
            self.state = 622
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(SolidityParser.T__42)
            self.state = 625
            self.match(SolidityParser.T__22)
            self.state = 626
            self.expression(0)
            self.state = 627
            self.match(SolidityParser.T__23)
            self.state = 628
            self.statement()
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(SolidityParser.T__43)
                self.state = 630
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(SolidityParser.T__44)
            self.state = 634
            self.expression(0)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__30:
                self.state = 635
                self.returnParameters()


            self.state = 638
            self.block()
            self.state = 640 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 639
                self.catchClause()
                self.state = 642 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SolidityParser.T__45):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(SolidityParser.T__45)
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                    self.state = 645
                    self.identifier()


                self.state = 648
                self.parameterList()


            self.state = 651
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(SolidityParser.T__46)
            self.state = 654
            self.match(SolidityParser.T__22)
            self.state = 655
            self.expression(0)
            self.state = 656
            self.match(SolidityParser.T__23)
            self.state = 657
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 659
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 660
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedStatement" ):
                return visitor.visitUncheckedStatement(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SolidityParser.T__47)
            self.state = 664
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_placeholderStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaceholderStatement" ):
                listener.enterPlaceholderStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaceholderStatement" ):
                listener.exitPlaceholderStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholderStatement" ):
                return visitor.visitPlaceholderStatement(self)
            else:
                return visitor.visitChildren(self)




    def placeholderStatement(self):

        localctx = SolidityParser.PlaceholderStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_placeholderStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(SolidityParser.T__48)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__1:
                self.state = 667
                self.match(SolidityParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(SolidityParser.T__26)
            self.state = 671
            self.match(SolidityParser.T__22)
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__4, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__33, SolidityParser.T__35, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__67, SolidityParser.T__96, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 672
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 673
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__4, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__33, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__67, SolidityParser.T__96, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 676
                self.expressionStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 677
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                self.state = 680
                self.expression(0)


            self.state = 683
            self.match(SolidityParser.T__23)
            self.state = 684
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(SolidityParser.T__49)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.StringLiteralFragment:
                self.state = 687
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 690
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(SolidityParser.T__50)
            self.state = 693
            self.statement()
            self.state = 694
            self.match(SolidityParser.T__46)
            self.state = 695
            self.match(SolidityParser.T__22)
            self.state = 696
            self.expression(0)
            self.state = 697
            self.match(SolidityParser.T__23)
            self.state = 698
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(SolidityParser.ContinueKeyword)
            self.state = 701
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(SolidityParser.BreakKeyword)
            self.state = 704
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(SolidityParser.T__51)
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                self.state = 707
                self.expression(0)


            self.state = 710
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(SolidityParser.T__52)
            self.state = 713
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(SolidityParser.T__53)
            self.state = 716
            self.functionCall()
            self.state = 717
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevertStatement" ):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(SolidityParser.T__54)
            self.state = 720
            self.functionCall()
            self.state = 721
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 723
                self.match(SolidityParser.T__55)
                self.state = 724
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 725
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 726
                self.match(SolidityParser.T__22)
                self.state = 727
                self.variableDeclarationList()
                self.state = 728
                self.match(SolidityParser.T__23)
                pass


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__9:
                self.state = 732
                self.match(SolidityParser.T__9)
                self.state = 733
                self.expression(0)


            self.state = 736
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 738
                self.variableDeclaration()


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 741
                self.match(SolidityParser.T__15)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                    self.state = 742
                    self.variableDeclaration()


                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(SolidityParser.T__22)
            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                        self.state = 751
                        self.identifier()


                    self.state = 754
                    self.match(SolidityParser.T__15) 
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 760
                self.identifier()


            self.state = 763
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__35) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (SolidityParser.Int - 99)) | (1 << (SolidityParser.Uint - 99)) | (1 << (SolidityParser.Byte - 99)) | (1 << (SolidityParser.Fixed - 99)) | (1 << (SolidityParser.Ufixed - 99)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperation" ):
                listener.enterPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperation" ):
                listener.exitPrefixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixOperation" ):
                return visitor.visitPrefixOperation(self)
            else:
                return visitor.visitChildren(self)


    class KeywordPrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordPrefixOperation" ):
                listener.enterKeywordPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordPrefixOperation" ):
                listener.exitKeywordPrefixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordPrefixOperation" ):
                return visitor.visitKeywordPrefixOperation(self)
            else:
                return visitor.visitChildren(self)


    class UnaryPrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefixOperation" ):
                listener.enterUnaryPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefixOperation" ):
                listener.exitUnaryPrefixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPrefixOperation" ):
                return visitor.visitUnaryPrefixOperation(self)
            else:
                return visitor.visitChildren(self)


    class OrderComparisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderComparison" ):
                listener.enterOrderComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderComparison" ):
                listener.exitOrderComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderComparison" ):
                return visitor.visitOrderComparison(self)
            else:
                return visitor.visitChildren(self)


    class ConditionalContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional" ):
                listener.enterConditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional" ):
                listener.exitConditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional" ):
                return visitor.visitConditional(self)
            else:
                return visitor.visitChildren(self)


    class AddOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddOperation" ):
                listener.enterAddOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddOperation" ):
                listener.exitAddOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddOperation" ):
                return visitor.visitAddOperation(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ShiftOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOperation" ):
                listener.enterShiftOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOperation" ):
                listener.exitShiftOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftOperation" ):
                return visitor.visitShiftOperation(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)


    class BitAndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndOperation" ):
                listener.enterBitAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndOperation" ):
                listener.exitBitAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndOperation" ):
                return visitor.visitBitAndOperation(self)
            else:
                return visitor.visitChildren(self)


    class MulOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulOperation" ):
                listener.enterMulOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulOperation" ):
                listener.exitMulOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulOperation" ):
                return visitor.visitMulOperation(self)
            else:
                return visitor.visitChildren(self)


    class IndexRangeAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRangeAccess" ):
                listener.enterIndexRangeAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRangeAccess" ):
                listener.exitIndexRangeAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexRangeAccess" ):
                return visitor.visitIndexRangeAccess(self)
            else:
                return visitor.visitChildren(self)


    class PayableExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)
        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayableExpression" ):
                listener.enterPayableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayableExpression" ):
                listener.exitPayableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayableExpression" ):
                return visitor.visitPayableExpression(self)
            else:
                return visitor.visitChildren(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpression" ):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexAccess" ):
                listener.enterIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexAccess" ):
                listener.exitIndexAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexAccess" ):
                return visitor.visitIndexAccess(self)
            else:
                return visitor.visitChildren(self)


    class BitNotOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotOperation" ):
                listener.enterBitNotOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotOperation" ):
                listener.exitBitNotOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitNotOperation" ):
                return visitor.visitBitNotOperation(self)
            else:
                return visitor.visitChildren(self)


    class BitOrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrOperation" ):
                listener.enterBitOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrOperation" ):
                listener.exitBitOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrOperation" ):
                return visitor.visitBitOrOperation(self)
            else:
                return visitor.visitChildren(self)


    class NotOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOperation" ):
                listener.enterNotOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOperation" ):
                listener.exitNotOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOperation" ):
                return visitor.visitNotOperation(self)
            else:
                return visitor.visitChildren(self)


    class AndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOperation" ):
                listener.enterAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOperation" ):
                listener.exitAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOperation" ):
                return visitor.visitAndOperation(self)
            else:
                return visitor.visitChildren(self)


    class ModOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModOperation" ):
                listener.enterModOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModOperation" ):
                listener.exitModOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModOperation" ):
                return visitor.visitModOperation(self)
            else:
                return visitor.visitChildren(self)


    class OrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrOperation" ):
                listener.enterOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrOperation" ):
                listener.exitOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrOperation" ):
                return visitor.visitOrOperation(self)
            else:
                return visitor.visitChildren(self)


    class SuffixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuffixOperation" ):
                listener.enterSuffixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuffixOperation" ):
                listener.exitSuffixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixOperation" ):
                return visitor.visitSuffixOperation(self)
            else:
                return visitor.visitChildren(self)


    class MemberAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class ValueExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpression" ):
                listener.enterValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpression" ):
                listener.exitValueExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpression" ):
                return visitor.visitValueExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitXorOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXorOperation" ):
                listener.enterBitXorOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXorOperation" ):
                listener.exitBitXorOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitXorOperation" ):
                return visitor.visitBitXorOperation(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallWithOptionsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)

        def functionCallOptions(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallWithOptions" ):
                listener.enterFunctionCallWithOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallWithOptions" ):
                listener.exitFunctionCallWithOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallWithOptions" ):
                return visitor.visitFunctionCallWithOptions(self)
            else:
                return visitor.visitChildren(self)


    class EqualityComparisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityComparison" ):
                return visitor.visitEqualityComparison(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = SolidityParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 768
                self.match(SolidityParser.T__61)
                self.state = 769
                self.typeName(0)
                pass

            elif la_ == 2:
                localctx = SolidityParser.PayableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 770
                self.match(SolidityParser.PayableKeyword)
                self.state = 771
                self.match(SolidityParser.T__22)
                self.state = 772
                self.expression(0)
                self.state = 773
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                localctx = SolidityParser.TypeConversionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 775
                self.elementaryTypeName()
                self.state = 776
                self.match(SolidityParser.T__22)
                self.state = 777
                self.expression(0)
                self.state = 778
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 4:
                localctx = SolidityParser.ParenExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 780
                self.match(SolidityParser.T__22)
                self.state = 781
                self.expression(0)
                self.state = 782
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 5:
                localctx = SolidityParser.PrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 784
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__59 or _la==SolidityParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 785
                self.expression(19)
                pass

            elif la_ == 6:
                localctx = SolidityParser.UnaryPrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 786
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__63 or _la==SolidityParser.T__64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 787
                self.expression(18)
                pass

            elif la_ == 7:
                localctx = SolidityParser.KeywordPrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 788
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__65 or _la==SolidityParser.T__66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 789
                self.expression(17)
                pass

            elif la_ == 8:
                localctx = SolidityParser.NotOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 790
                self.match(SolidityParser.T__67)
                self.state = 791
                self.expression(16)
                pass

            elif la_ == 9:
                localctx = SolidityParser.BitNotOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 792
                self.match(SolidityParser.T__4)
                self.state = 793
                self.expression(15)
                pass

            elif la_ == 10:
                localctx = SolidityParser.PrimaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 794
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ModOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 797
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 798
                        self.match(SolidityParser.T__68)
                        self.state = 799
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.MulOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 800
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 801
                        _la = self._input.LA(1)
                        if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (SolidityParser.T__12 - 13)) | (1 << (SolidityParser.T__69 - 13)) | (1 << (SolidityParser.T__70 - 13)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 802
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.AddOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 803
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 804
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__63 or _la==SolidityParser.T__64):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 805
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ShiftOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 806
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 807
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__71 or _la==SolidityParser.T__72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 808
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.BitAndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 809
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 810
                        self.match(SolidityParser.T__73)
                        self.state = 811
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.BitXorOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 812
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 813
                        self.match(SolidityParser.T__3)
                        self.state = 814
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.BitOrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 815
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 816
                        self.match(SolidityParser.T__74)
                        self.state = 817
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.OrderComparisonContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 818
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 819
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 820
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.EqualityComparisonContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 821
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 822
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__75 or _la==SolidityParser.T__76):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 823
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.AndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 824
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 825
                        self.match(SolidityParser.T__77)
                        self.state = 826
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.OrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 827
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 828
                        self.match(SolidityParser.T__2)
                        self.state = 829
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ConditionalContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 830
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 831
                        self.match(SolidityParser.T__78)
                        self.state = 832
                        self.expression(0)
                        self.state = 833
                        self.match(SolidityParser.T__62)
                        self.state = 834
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.AssignmentContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 836
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 837
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__9 or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (SolidityParser.T__79 - 80)) | (1 << (SolidityParser.T__80 - 80)) | (1 << (SolidityParser.T__81 - 80)) | (1 << (SolidityParser.T__82 - 80)) | (1 << (SolidityParser.T__83 - 80)) | (1 << (SolidityParser.T__84 - 80)) | (1 << (SolidityParser.T__85 - 80)) | (1 << (SolidityParser.T__86 - 80)) | (1 << (SolidityParser.T__87 - 80)) | (1 << (SolidityParser.T__88 - 80)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 838
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.SuffixOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 839
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 840
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__59 or _la==SolidityParser.T__60):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.IndexAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 841
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 842
                        self.match(SolidityParser.T__33)
                        self.state = 844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                            self.state = 843
                            self.expression(0)


                        self.state = 846
                        self.match(SolidityParser.T__34)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.IndexRangeAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 847
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 848
                        self.match(SolidityParser.T__33)
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                            self.state = 849
                            self.expression(0)


                        self.state = 852
                        self.match(SolidityParser.T__62)
                        self.state = 854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                            self.state = 853
                            self.expression(0)


                        self.state = 856
                        self.match(SolidityParser.T__34)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.MemberAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 857
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 858
                        self.match(SolidityParser.T__36)
                        self.state = 859
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ValueExpressionContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 860
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 861
                        self.match(SolidityParser.T__14)
                        self.state = 862
                        self.nameValueList()
                        self.state = 863
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.FunctionCallWithOptionsContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SolidityParser.T__14:
                            self.state = 866
                            self.functionCallOptions()


                        self.state = 869
                        self.match(SolidityParser.T__22)
                        self.state = 870
                        self.functionCallArguments()
                        self.state = 871
                        self.match(SolidityParser.T__23)
                        pass

             
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_primaryExpression)
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.match(SolidityParser.PayableKeyword)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 881
                self.numberLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 882
                self.hexLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 883
                self.tupleExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 884
                self.typeNameExpression()
                self.state = 887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.match(SolidityParser.T__33)
                    self.state = 886
                    self.match(SolidityParser.T__34)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 889
                self.identifier()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(SolidityParser.T__33)
                    self.state = 891
                    self.match(SolidityParser.T__34)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 894
                self.stringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.expression(0)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 898
                self.match(SolidityParser.T__15)
                self.state = 899
                self.expression(0)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.nameValue()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(SolidityParser.T__15)
                    self.state = 907
                    self.nameValue() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__15:
                self.state = 913
                self.match(SolidityParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.identifier()
            self.state = 917
            self.match(SolidityParser.T__62)
            self.state = 918
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOptions" ):
                listener.enterFunctionCallOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOptions" ):
                listener.exitFunctionCallOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOptions" ):
                return visitor.visitFunctionCallOptions(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOptions(self):

        localctx = SolidityParser.FunctionCallOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionCallOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(SolidityParser.T__14)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 921
                self.nameValueList()


            self.state = 924
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.match(SolidityParser.T__14)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                    self.state = 927
                    self.nameValueList()


                self.state = 930
                self.match(SolidityParser.T__16)
                pass
            elif token in [SolidityParser.T__4, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__23, SolidityParser.T__24, SolidityParser.T__33, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__67, SolidityParser.T__96, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                    self.state = 931
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.expression(0)
            self.state = 937
            self.match(SolidityParser.T__22)
            self.state = 938
            self.functionCallArguments()
            self.state = 939
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(SolidityParser.T__14)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__42) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SolidityParser.T__89 - 90)) | (1 << (SolidityParser.T__91 - 90)) | (1 << (SolidityParser.T__92 - 90)) | (1 << (SolidityParser.T__96 - 90)) | (1 << (SolidityParser.DecimalNumber - 90)) | (1 << (SolidityParser.HexNumber - 90)) | (1 << (SolidityParser.HexLiteralFragment - 90)) | (1 << (SolidityParser.AnonymousKeyword - 90)) | (1 << (SolidityParser.BreakKeyword - 90)) | (1 << (SolidityParser.ConstantKeyword - 90)) | (1 << (SolidityParser.ImmutableKeyword - 90)) | (1 << (SolidityParser.ContinueKeyword - 90)) | (1 << (SolidityParser.LeaveKeyword - 90)) | (1 << (SolidityParser.ExternalKeyword - 90)) | (1 << (SolidityParser.IndexedKeyword - 90)) | (1 << (SolidityParser.InternalKeyword - 90)) | (1 << (SolidityParser.PayableKeyword - 90)) | (1 << (SolidityParser.PrivateKeyword - 90)) | (1 << (SolidityParser.PublicKeyword - 90)) | (1 << (SolidityParser.VirtualKeyword - 90)) | (1 << (SolidityParser.PureKeyword - 90)) | (1 << (SolidityParser.TypeKeyword - 90)) | (1 << (SolidityParser.ViewKeyword - 90)) | (1 << (SolidityParser.ConstructorKeyword - 90)) | (1 << (SolidityParser.FallbackKeyword - 90)) | (1 << (SolidityParser.ReceiveKeyword - 90)) | (1 << (SolidityParser.Identifier - 90)) | (1 << (SolidityParser.StringLiteralFragment - 90)))) != 0):
                self.state = 942
                self.assemblyItem()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyItem)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 954
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 955
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 956
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 957
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 958
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 959
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 960
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 961
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 962
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 963
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 964
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 965
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 966
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 967
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyExpression)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 972
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyMember" ):
                return visitor.visitAssemblyMember(self)
            else:
                return visitor.visitChildren(self)




    def assemblyMember(self):

        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.identifier()
            self.state = 976
            self.match(SolidityParser.T__36)
            self.state = 977
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__51]:
                self.state = 979
                self.match(SolidityParser.T__51)
                pass
            elif token in [SolidityParser.T__35]:
                self.state = 980
                self.match(SolidityParser.T__35)
                pass
            elif token in [SolidityParser.T__58]:
                self.state = 981
                self.match(SolidityParser.T__58)
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__96, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.state = 982
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 985
                self.match(SolidityParser.T__22)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__58))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                    self.state = 986
                    self.assemblyExpression()


                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 989
                    self.match(SolidityParser.T__15)
                    self.state = 990
                    self.assemblyExpression()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(SolidityParser.T__89)
            self.state = 1000
            self.assemblyIdentifierOrList()
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__90:
                self.state = 1001
                self.match(SolidityParser.T__90)
                self.state = 1002
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.assemblyIdentifierOrList()
            self.state = 1006
            self.match(SolidityParser.T__90)
            self.state = 1007
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierOrList" ):
                return visitor.visitAssemblyIdentifierOrList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1011
                self.match(SolidityParser.T__22)
                self.state = 1012
                self.assemblyIdentifierList()
                self.state = 1013
                self.match(SolidityParser.T__23)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.identifier()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 1018
                self.match(SolidityParser.T__15)
                self.state = 1019
                self.identifier()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(SolidityParser.T__91)
            self.state = 1026
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.identifier()
            self.state = 1029
            self.match(SolidityParser.T__62)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(SolidityParser.T__92)
            self.state = 1032
            self.assemblyExpression()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__93 or _la==SolidityParser.T__94:
                self.state = 1033
                self.assemblyCase()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyCase)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(SolidityParser.T__93)
                self.state = 1040
                self.assemblyLiteral()
                self.state = 1041
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.match(SolidityParser.T__94)
                self.state = 1044
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(SolidityParser.T__29)
            self.state = 1048
            self.identifier()
            self.state = 1049
            self.match(SolidityParser.T__22)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)))) != 0):
                self.state = 1050
                self.assemblyIdentifierList()


            self.state = 1053
            self.match(SolidityParser.T__23)
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__95:
                self.state = 1054
                self.assemblyFunctionReturns()


            self.state = 1057
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(SolidityParser.T__95)
            self.state = 1060
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(SolidityParser.T__26)
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1063
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__51, SolidityParser.T__54, SolidityParser.T__58, SolidityParser.T__96, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 1064
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1067
            self.assemblyExpression()
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1068
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__35, SolidityParser.T__41, SolidityParser.T__51, SolidityParser.T__54, SolidityParser.T__58, SolidityParser.T__96, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 1069
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1072
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(SolidityParser.T__42)
            self.state = 1075
            self.assemblyExpression()
            self.state = 1076
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyLiteral)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.stringLiteral()
                pass
            elif token in [SolidityParser.DecimalNumber]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [SolidityParser.HexNumber]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [SolidityParser.HexLiteralFragment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.hexLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubAssembly" ):
                return visitor.visitSubAssembly(self)
            else:
                return visitor.visitChildren(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(SolidityParser.T__49)
            self.state = 1085
            self.identifier()
            self.state = 1086
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.match(SolidityParser.T__22)
                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                        self.state = 1089
                        self.expression(0)


                    self.state = 1098
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__15:
                        self.state = 1092
                        self.match(SolidityParser.T__15)
                        self.state = 1094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                            self.state = 1093
                            self.expression(0)


                        self.state = 1100
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1103
                self.match(SolidityParser.T__23)
                pass
            elif token in [SolidityParser.T__33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.match(SolidityParser.T__33)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (SolidityParser.T__4 - 5)) | (1 << (SolidityParser.T__13 - 5)) | (1 << (SolidityParser.T__22 - 5)) | (1 << (SolidityParser.T__24 - 5)) | (1 << (SolidityParser.T__33 - 5)) | (1 << (SolidityParser.T__35 - 5)) | (1 << (SolidityParser.T__41 - 5)) | (1 << (SolidityParser.T__54 - 5)) | (1 << (SolidityParser.T__55 - 5)) | (1 << (SolidityParser.T__56 - 5)) | (1 << (SolidityParser.T__57 - 5)) | (1 << (SolidityParser.T__58 - 5)) | (1 << (SolidityParser.T__59 - 5)) | (1 << (SolidityParser.T__60 - 5)) | (1 << (SolidityParser.T__61 - 5)) | (1 << (SolidityParser.T__63 - 5)) | (1 << (SolidityParser.T__64 - 5)) | (1 << (SolidityParser.T__65 - 5)) | (1 << (SolidityParser.T__66 - 5)) | (1 << (SolidityParser.T__67 - 5)))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (SolidityParser.T__96 - 97)) | (1 << (SolidityParser.Int - 97)) | (1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.AnonymousKeyword - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ConstantKeyword - 97)) | (1 << (SolidityParser.ImmutableKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.ExternalKeyword - 97)) | (1 << (SolidityParser.IndexedKeyword - 97)) | (1 << (SolidityParser.InternalKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.PrivateKeyword - 97)) | (1 << (SolidityParser.PublicKeyword - 97)) | (1 << (SolidityParser.VirtualKeyword - 97)) | (1 << (SolidityParser.PureKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ViewKeyword - 97)) | (1 << (SolidityParser.ConstructorKeyword - 97)) | (1 << (SolidityParser.FallbackKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) != 0):
                    self.state = 1105
                    self.expression(0)
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__15:
                        self.state = 1106
                        self.match(SolidityParser.T__15)
                        self.state = 1107
                        self.expression(0)
                        self.state = 1112
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1115
                self.match(SolidityParser.T__34)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExpression" ):
                return visitor.visitTypeNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeNameExpression)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__35, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__58, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.elementaryTypeName()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__41, SolidityParser.T__54, SolidityParser.T__96, SolidityParser.AnonymousKeyword, SolidityParser.BreakKeyword, SolidityParser.ConstantKeyword, SolidityParser.ImmutableKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.ExternalKeyword, SolidityParser.IndexedKeyword, SolidityParser.InternalKeyword, SolidityParser.PayableKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword, SolidityParser.VirtualKeyword, SolidityParser.PureKeyword, SolidityParser.TypeKeyword, SolidityParser.ViewKeyword, SolidityParser.ConstructorKeyword, SolidityParser.FallbackKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            _la = self._input.LA(1)
            if not(_la==SolidityParser.DecimalNumber or _la==SolidityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1123
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allKeywords(self):
            return self.getTypedRuleContext(SolidityParser.AllKeywordsContext,0)


        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.allKeywords()
                pass

            elif la_ == 2:
                self.state = 1127
                self.match(SolidityParser.T__13)
                pass

            elif la_ == 3:
                self.state = 1128
                self.match(SolidityParser.T__41)
                pass

            elif la_ == 4:
                self.state = 1129
                self.match(SolidityParser.ReceiveKeyword)
                pass

            elif la_ == 5:
                self.state = 1130
                self.match(SolidityParser.T__96)
                pass

            elif la_ == 6:
                self.state = 1131
                self.match(SolidityParser.T__54)
                pass

            elif la_ == 7:
                self.state = 1132
                self.match(SolidityParser.T__24)
                pass

            elif la_ == 8:
                self.state = 1133
                self.match(SolidityParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexLiteral" ):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1136
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1139 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PublicKeyword(self):
            return self.getToken(SolidityParser.PublicKeyword, 0)

        def PrivateKeyword(self):
            return self.getToken(SolidityParser.PrivateKeyword, 0)

        def ExternalKeyword(self):
            return self.getToken(SolidityParser.ExternalKeyword, 0)

        def InternalKeyword(self):
            return self.getToken(SolidityParser.InternalKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibilityKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityKeyword" ):
                listener.enterVisibilityKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityKeyword" ):
                listener.exitVisibilityKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibilityKeyword" ):
                return visitor.visitVisibilityKeyword(self)
            else:
                return visitor.visitChildren(self)




    def visibilityKeyword(self):

        localctx = SolidityParser.VisibilityKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_visibilityKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            _la = self._input.LA(1)
            if not(((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (SolidityParser.ExternalKeyword - 116)) | (1 << (SolidityParser.InternalKeyword - 116)) | (1 << (SolidityParser.PrivateKeyword - 116)) | (1 << (SolidityParser.PublicKeyword - 116)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllKeywordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ImmutableKeyword(self):
            return self.getToken(SolidityParser.ImmutableKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def visibilityKeyword(self):
            return self.getTypedRuleContext(SolidityParser.VisibilityKeywordContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def VirtualKeyword(self):
            return self.getToken(SolidityParser.VirtualKeyword, 0)

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_allKeywords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllKeywords" ):
                listener.enterAllKeywords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllKeywords" ):
                listener.exitAllKeywords(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllKeywords" ):
                return visitor.visitAllKeywords(self)
            else:
                return visitor.visitChildren(self)




    def allKeywords(self):

        localctx = SolidityParser.AllKeywordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_allKeywords)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.AnonymousKeyword]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.match(SolidityParser.AnonymousKeyword)
                pass
            elif token in [SolidityParser.BreakKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.match(SolidityParser.BreakKeyword)
                pass
            elif token in [SolidityParser.ConstantKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1145
                self.match(SolidityParser.ConstantKeyword)
                pass
            elif token in [SolidityParser.ImmutableKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1146
                self.match(SolidityParser.ImmutableKeyword)
                pass
            elif token in [SolidityParser.ContinueKeyword]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1147
                self.match(SolidityParser.ContinueKeyword)
                pass
            elif token in [SolidityParser.LeaveKeyword]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1148
                self.match(SolidityParser.LeaveKeyword)
                pass
            elif token in [SolidityParser.IndexedKeyword]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1149
                self.match(SolidityParser.IndexedKeyword)
                pass
            elif token in [SolidityParser.ExternalKeyword, SolidityParser.InternalKeyword, SolidityParser.PrivateKeyword, SolidityParser.PublicKeyword]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1150
                self.visibilityKeyword()
                pass
            elif token in [SolidityParser.PayableKeyword]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1151
                self.match(SolidityParser.PayableKeyword)
                pass
            elif token in [SolidityParser.VirtualKeyword]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1152
                self.match(SolidityParser.VirtualKeyword)
                pass
            elif token in [SolidityParser.PureKeyword]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1153
                self.match(SolidityParser.PureKeyword)
                pass
            elif token in [SolidityParser.TypeKeyword]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1154
                self.match(SolidityParser.TypeKeyword)
                pass
            elif token in [SolidityParser.ViewKeyword]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1155
                self.match(SolidityParser.ViewKeyword)
                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1156
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1157
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1158
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(SolidityParser.T__97)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 1162
                self.match(SolidityParser.T__22)
                self.state = 1163
                self.userDefinedTypeName()
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 1164
                    self.match(SolidityParser.T__15)
                    self.state = 1165
                    self.userDefinedTypeName()
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1171
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1175
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1178 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.typeName_sempred
        self._predicates[64] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




